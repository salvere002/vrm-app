{"ast":null,"code":"import { PI, TWO_PI } from \"./../constants\";\n/** Vector Math class. */\nexport default class Vector {\n  constructor(a, b, c) {\n    var _a, _b, _c, _d, _e, _f;\n    if (Array.isArray(a)) {\n      this.x = (_a = a[0]) !== null && _a !== void 0 ? _a : 0;\n      this.y = (_b = a[1]) !== null && _b !== void 0 ? _b : 0;\n      this.z = (_c = a[2]) !== null && _c !== void 0 ? _c : 0;\n      return;\n    }\n    if (!!a && typeof a === \"object\") {\n      this.x = (_d = a.x) !== null && _d !== void 0 ? _d : 0;\n      this.y = (_e = a.y) !== null && _e !== void 0 ? _e : 0;\n      this.z = (_f = a.z) !== null && _f !== void 0 ? _f : 0;\n      return;\n    }\n    this.x = a !== null && a !== void 0 ? a : 0;\n    this.y = b !== null && b !== void 0 ? b : 0;\n    this.z = c !== null && c !== void 0 ? c : 0;\n  }\n  // Methods //\n  /**\n   * Returns the negative of this vector.\n   */\n  negative() {\n    return new Vector(-this.x, -this.y, -this.z);\n  }\n  /**\n   * Add a vector or number to this vector.\n   * @param {Vector | number} a: Vector or number to add\n   * @returns {Vector} New vector\n   */\n  add(v) {\n    if (v instanceof Vector) return new Vector(this.x + v.x, this.y + v.y, this.z + v.z);else return new Vector(this.x + v, this.y + v, this.z + v);\n  }\n  /**\n   * Substracts a vector or number from this vector.\n   * @param {Vector | number} a: Vector or number to subtract\n   * @returns {Vector} New vector\n   */\n  subtract(v) {\n    if (v instanceof Vector) return new Vector(this.x - v.x, this.y - v.y, this.z - v.z);else return new Vector(this.x - v, this.y - v, this.z - v);\n  }\n  /**\n   * Multiplies a vector or a number to a vector.\n   * @param {Vector | number} a: Vector or number to multiply\n   * @param {Vector} b: Vector to multiply\n   */\n  multiply(v) {\n    if (v instanceof Vector) return new Vector(this.x * v.x, this.y * v.y, this.z * v.z);else return new Vector(this.x * v, this.y * v, this.z * v);\n  }\n  /**\n   * Divide this vector by a vector or a number.\n   * @param {Vector | number} a: Vector or number to divide\n   * @returns {Vector} New vector\n   */\n  divide(v) {\n    if (v instanceof Vector) return new Vector(this.x / v.x, this.y / v.y, this.z / v.z);else return new Vector(this.x / v, this.y / v, this.z / v);\n  }\n  /**\n   * Check if the given vector is equal to this vector.\n   * @param {Vector} v: Vector to compare\n   * @returns {boolean} True if equal\n   */\n  equals(v) {\n    return this.x == v.x && this.y == v.y && this.z == v.z;\n  }\n  /**\n   * Returns the dot product of this vector and another vector.\n   * @param {Vector} v: Vector to dot\n   * @returns {number} Dot product\n   */\n  dot(v) {\n    return this.x * v.x + this.y * v.y + this.z * v.z;\n  }\n  /**\n   * Cross product of two vectors.\n   * @param {Vector} a: Vector to cross\n   * @param {Vector} b: Vector to cross\n   */\n  cross(v) {\n    return new Vector(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x);\n  }\n  /**\n   * Get the length of the Vector\n   * @returns {number} Length\n   */\n  length() {\n    return Math.sqrt(this.dot(this));\n  }\n  /**\n   * Find the distance between this and another vector.\n   * @param {Vector} v: Vector to find distance to\n   * @param {2 | 3} d: 2D or 3D distance\n   * @returns {number} Distance\n   */\n  distance(v) {\n    let d = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n    //2D distance\n    if (d === 2) return Math.sqrt(Math.pow(this.x - v.x, 2) + Math.pow(this.y - v.y, 2));\n    //3D distance\n    else return Math.sqrt(Math.pow(this.x - v.x, 2) + Math.pow(this.y - v.y, 2) + Math.pow(this.z - v.z, 2));\n  }\n  /**\n   * Lerp between this vector and another vector.\n   * @param {Vector} v: Vector to lerp to\n   * @param {number} fraction: Fraction to lerp\n   * @returns {Vector}\n   */\n  lerp(v, fraction) {\n    return v.subtract(this).multiply(fraction).add(this);\n  }\n  /**\n   * Returns the unit vector of this vector.\n   * @returns {Vector} Unit vector\n   */\n  unit() {\n    return this.divide(this.length());\n  }\n  min() {\n    return Math.min(Math.min(this.x, this.y), this.z);\n  }\n  max() {\n    return Math.max(Math.max(this.x, this.y), this.z);\n  }\n  /**\n   * To Angles\n   * @param {AxisMap} [axisMap = {x: \"x\", y: \"y\", z: \"z\"}]\n   * @returns {{ theta: number, phi: number }}\n   */\n  toSphericalCoords() {\n    let axisMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      x: \"x\",\n      y: \"y\",\n      z: \"z\"\n    };\n    return {\n      theta: Math.atan2(this[axisMap.y], this[axisMap.x]),\n      phi: Math.acos(this[axisMap.z] / this.length())\n    };\n  }\n  /**\n   * Returns the angle between this vector and vector a in radians.\n   * @param {Vector} a: Vector\n   * @returns {number}\n   */\n  angleTo(a) {\n    return Math.acos(this.dot(a) / (this.length() * a.length()));\n  }\n  /**\n   * Array representation of the vector.\n   * @param {number} n: Array length\n   * @returns {number[]} Array\n   * @example\n   * new Vector(1, 2, 3).toArray(); // [1, 2, 3]\n   */\n  toArray(n) {\n    return [this.x, this.y, this.z].slice(0, n || 3);\n  }\n  /**\n   * Clone the vector.\n   * @returns {Vector} New vector\n   */\n  clone() {\n    return new Vector(this.x, this.y, this.z);\n  }\n  /**\n   * Init this Vector with explicit values\n   * @param {number} x: X value\n   * @param {number} y: Y value\n   * @param {number} z: Z value\n   */\n  init(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  }\n  // static methods //\n  static negative(a) {\n    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector();\n    b.x = -a.x;\n    b.y = -a.y;\n    b.z = -a.z;\n    return b;\n  }\n  static add(a, b) {\n    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector();\n    if (b instanceof Vector) {\n      c.x = a.x + b.x;\n      c.y = a.y + b.y;\n      c.z = a.z + b.z;\n    } else {\n      c.x = a.x + b;\n      c.y = a.y + b;\n      c.z = a.z + b;\n    }\n    return c;\n  }\n  static subtract(a, b) {\n    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector();\n    if (b instanceof Vector) {\n      c.x = a.x - b.x;\n      c.y = a.y - b.y;\n      c.z = a.z - b.z;\n    } else {\n      c.x = a.x - b;\n      c.y = a.y - b;\n      c.z = a.z - b;\n    }\n    return c;\n  }\n  static multiply(a, b) {\n    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector();\n    if (b instanceof Vector) {\n      c.x = a.x * b.x;\n      c.y = a.y * b.y;\n      c.z = a.z * b.z;\n    } else {\n      c.x = a.x * b;\n      c.y = a.y * b;\n      c.z = a.z * b;\n    }\n    return c;\n  }\n  static divide(a, b) {\n    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector();\n    if (b instanceof Vector) {\n      c.x = a.x / b.x;\n      c.y = a.y / b.y;\n      c.z = a.z / b.z;\n    } else {\n      c.x = a.x / b;\n      c.y = a.y / b;\n      c.z = a.z / b;\n    }\n    return c;\n  }\n  static cross(a, b) {\n    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector();\n    c.x = a.y * b.z - a.z * b.y;\n    c.y = a.z * b.x - a.x * b.z;\n    c.z = a.x * b.y - a.y * b.x;\n    return c;\n  }\n  static unit(a, b) {\n    const length = a.length();\n    b.x = a.x / length;\n    b.y = a.y / length;\n    b.z = a.z / length;\n    return b;\n  }\n  /**\n   * Create new vector from angles\n   * @param {number} theta: Theta angle\n   * @param {number} phi: Phi angle\n   * @returns {Vector} New vector\n   */\n  static fromAngles(theta, phi) {\n    return new Vector(Math.cos(theta) * Math.cos(phi), Math.sin(phi), Math.sin(theta) * Math.cos(phi));\n  }\n  static randomDirection() {\n    return Vector.fromAngles(Math.random() * TWO_PI, Math.asin(Math.random() * 2 - 1));\n  }\n  static min(a, b) {\n    return new Vector(Math.min(a.x, b.x), Math.min(a.y, b.y), Math.min(a.z, b.z));\n  }\n  static max(a, b) {\n    return new Vector(Math.max(a.x, b.x), Math.max(a.y, b.y), Math.max(a.z, b.z));\n  }\n  /**\n   * Lerp between two vectors\n   * @param {Vector} a: Vector a\n   * @param {Vector} b: Vector b\n   * @param {number} fraction: Fraction\n   */\n  static lerp(a, b, fraction) {\n    if (b instanceof Vector) {\n      return b.subtract(a).multiply(fraction).add(a);\n    } else {\n      return (b - a) * fraction + a;\n    }\n  }\n  /**\n   * Create a new vector from an Array\n   * @param {number[]} array: Array\n   * @returns {Vector} New vector\n   */\n  static fromArray(a) {\n    if (Array.isArray(a)) {\n      return new Vector(a[0], a[1], a[2]);\n    }\n    return new Vector(a.x, a.y, a.z);\n  }\n  /**\n   * Angle between two vectors\n   * @param {Vector} a: Vector a\n   * @param {Vector} b: Vector b\n   * @returns\n   */\n  static angleBetween(a, b) {\n    return a.angleTo(b);\n  }\n  static distance(a, b, d) {\n    if (d === 2) return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));else return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2) + Math.pow(a.z - b.z, 2));\n  }\n  static toDegrees(a) {\n    return a * (180 / PI);\n  }\n  static normalizeAngle(radians) {\n    let angle = radians % TWO_PI;\n    angle = angle > PI ? angle - TWO_PI : angle < -PI ? TWO_PI + angle : angle;\n    //returns normalized values to -1,1\n    return angle / PI;\n  }\n  static normalizeRadians(radians) {\n    if (radians >= PI / 2) {\n      radians -= TWO_PI;\n    }\n    if (radians <= -PI / 2) {\n      radians += TWO_PI;\n      radians = PI - radians;\n    }\n    //returns normalized values to -1,1\n    return radians / PI;\n  }\n  static find2DAngle(cx, cy, ex, ey) {\n    const dy = ey - cy;\n    const dx = ex - cx;\n    const theta = Math.atan2(dy, dx);\n    return theta;\n  }\n  /**\n   * Find 3D rotation between two vectors\n   * @param {Vector} a: First vector\n   * @param {Vector} b: Second vector\n   * @param {boolean} normalize: Normalize the result\n   */\n  static findRotation(a, b) {\n    let normalize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (normalize) {\n      return new Vector(Vector.normalizeRadians(Vector.find2DAngle(a.z, a.x, b.z, b.x)), Vector.normalizeRadians(Vector.find2DAngle(a.z, a.y, b.z, b.y)), Vector.normalizeRadians(Vector.find2DAngle(a.x, a.y, b.x, b.y)));\n    } else {\n      return new Vector(Vector.find2DAngle(a.z, a.x, b.z, b.x), Vector.find2DAngle(a.z, a.y, b.z, b.y), Vector.find2DAngle(a.x, a.y, b.x, b.y));\n    }\n  }\n  /**\n   * Find roll pitch yaw of plane formed by 3 points\n   * @param {Vector} a: Vector\n   * @param {Vector} b: Vector\n   * @param {Vector} c: Vector\n   */\n  static rollPitchYaw(a, b, c) {\n    if (!c) {\n      return new Vector(Vector.normalizeAngle(Vector.find2DAngle(a.z, a.y, b.z, b.y)), Vector.normalizeAngle(Vector.find2DAngle(a.z, a.x, b.z, b.x)), Vector.normalizeAngle(Vector.find2DAngle(a.x, a.y, b.x, b.y)));\n    }\n    const qb = b.subtract(a);\n    const qc = c.subtract(a);\n    const n = qb.cross(qc);\n    const unitZ = n.unit();\n    const unitX = qb.unit();\n    const unitY = unitZ.cross(unitX);\n    const beta = Math.asin(unitZ.x) || 0;\n    const alpha = Math.atan2(-unitZ.y, unitZ.z) || 0;\n    const gamma = Math.atan2(-unitY.x, unitX.x) || 0;\n    return new Vector(Vector.normalizeAngle(alpha), Vector.normalizeAngle(beta), Vector.normalizeAngle(gamma));\n  }\n  /**\n   * Find angle between 3D Coordinates\n   * @param {Vector | number} a: Vector or Number\n   * @param {Vector | number} b: Vector or Number\n   * @param {Vector | number} c: Vector or Number\n   */\n  static angleBetween3DCoords(a, b, c) {\n    if (!(a instanceof Vector)) {\n      a = new Vector(a);\n      b = new Vector(b);\n      c = new Vector(c);\n    }\n    // Calculate vector between points 1 and 2\n    const v1 = a.subtract(b);\n    // Calculate vector between points 2 and 3\n    const v2 = c.subtract(b);\n    // The dot product of vectors v1 & v2 is a function of the cosine of the\n    // angle between them (it's scaled by the product of their magnitudes).\n    const v1norm = v1.unit();\n    const v2norm = v2.unit();\n    // Calculate the dot products of vectors v1 and v2\n    const dotProducts = v1norm.dot(v2norm);\n    // Extract the angle from the dot products\n    const angle = Math.acos(dotProducts);\n    // return single angle Normalized to 1\n    return Vector.normalizeRadians(angle);\n  }\n  /**\n   * Get normalized, spherical coordinates for the vector bc, relative to vector ab\n   * @param {Vector | number} a: Vector or Number\n   * @param {Vector | number} b: Vector or Number\n   * @param {Vector | number} c: Vector or Number\n   * @param {AxisMap} axisMap: Mapped axis to get the right spherical coords\n   */\n  static getRelativeSphericalCoords(a, b, c, axisMap) {\n    if (!(a instanceof Vector)) {\n      a = new Vector(a);\n      b = new Vector(b);\n      c = new Vector(c);\n    }\n    // Calculate vector between points 1 and 2\n    const v1 = b.subtract(a);\n    // Calculate vector between points 2 and 3\n    const v2 = c.subtract(b);\n    const v1norm = v1.unit();\n    const v2norm = v2.unit();\n    const {\n      theta: theta1,\n      phi: phi1\n    } = v1norm.toSphericalCoords(axisMap);\n    const {\n      theta: theta2,\n      phi: phi2\n    } = v2norm.toSphericalCoords(axisMap);\n    const theta = theta1 - theta2;\n    const phi = phi1 - phi2;\n    return {\n      theta: Vector.normalizeAngle(theta),\n      phi: Vector.normalizeAngle(phi)\n    };\n  }\n  /**\n   * Get normalized, spherical coordinates for the vector bc\n   * @param {Vector | number} a: Vector or Number\n   * @param {Vector | number} b: Vector or Number\n   * @param {AxisMap} axisMap: Mapped axis to get the right spherical coords\n   */\n  static getSphericalCoords(a, b) {\n    let axisMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      x: \"x\",\n      y: \"y\",\n      z: \"z\"\n    };\n    if (!(a instanceof Vector)) {\n      a = new Vector(a);\n      b = new Vector(b);\n    }\n    // Calculate vector between points 1 and 2\n    const v1 = b.subtract(a);\n    const v1norm = v1.unit();\n    const {\n      theta,\n      phi\n    } = v1norm.toSphericalCoords(axisMap);\n    return {\n      theta: Vector.normalizeAngle(-theta),\n      phi: Vector.normalizeAngle(PI / 2 - phi)\n    };\n  }\n}","map":{"version":3,"names":["PI","TWO_PI","Vector","constructor","a","b","c","_a","_b","_c","_d","_e","_f","Array","isArray","x","y","z","negative","add","v","subtract","multiply","divide","equals","dot","cross","length","Math","sqrt","distance","d","arguments","undefined","pow","lerp","fraction","unit","min","max","toSphericalCoords","axisMap","theta","atan2","phi","acos","angleTo","toArray","n","slice","clone","init","fromAngles","cos","sin","randomDirection","random","asin","fromArray","angleBetween","toDegrees","normalizeAngle","radians","angle","normalizeRadians","find2DAngle","cx","cy","ex","ey","dy","dx","findRotation","normalize","rollPitchYaw","qb","qc","unitZ","unitX","unitY","beta","alpha","gamma","angleBetween3DCoords","v1","v2","v1norm","v2norm","dotProducts","getRelativeSphericalCoords","theta1","phi1","theta2","phi2","getSphericalCoords"],"sources":["/Users/hzh-mac/Downloads/VRM/vrm-app/node_modules/kalidokit/dist/utils/vector.js"],"sourcesContent":["import { PI, TWO_PI } from \"./../constants\";\n/** Vector Math class. */\nexport default class Vector {\n    constructor(a, b, c) {\n        var _a, _b, _c, _d, _e, _f;\n        if (Array.isArray(a)) {\n            this.x = (_a = a[0]) !== null && _a !== void 0 ? _a : 0;\n            this.y = (_b = a[1]) !== null && _b !== void 0 ? _b : 0;\n            this.z = (_c = a[2]) !== null && _c !== void 0 ? _c : 0;\n            return;\n        }\n        if (!!a && typeof a === \"object\") {\n            this.x = (_d = a.x) !== null && _d !== void 0 ? _d : 0;\n            this.y = (_e = a.y) !== null && _e !== void 0 ? _e : 0;\n            this.z = (_f = a.z) !== null && _f !== void 0 ? _f : 0;\n            return;\n        }\n        this.x = a !== null && a !== void 0 ? a : 0;\n        this.y = b !== null && b !== void 0 ? b : 0;\n        this.z = c !== null && c !== void 0 ? c : 0;\n    }\n    // Methods //\n    /**\n     * Returns the negative of this vector.\n     */\n    negative() {\n        return new Vector(-this.x, -this.y, -this.z);\n    }\n    /**\n     * Add a vector or number to this vector.\n     * @param {Vector | number} a: Vector or number to add\n     * @returns {Vector} New vector\n     */\n    add(v) {\n        if (v instanceof Vector)\n            return new Vector(this.x + v.x, this.y + v.y, this.z + v.z);\n        else\n            return new Vector(this.x + v, this.y + v, this.z + v);\n    }\n    /**\n     * Substracts a vector or number from this vector.\n     * @param {Vector | number} a: Vector or number to subtract\n     * @returns {Vector} New vector\n     */\n    subtract(v) {\n        if (v instanceof Vector)\n            return new Vector(this.x - v.x, this.y - v.y, this.z - v.z);\n        else\n            return new Vector(this.x - v, this.y - v, this.z - v);\n    }\n    /**\n     * Multiplies a vector or a number to a vector.\n     * @param {Vector | number} a: Vector or number to multiply\n     * @param {Vector} b: Vector to multiply\n     */\n    multiply(v) {\n        if (v instanceof Vector)\n            return new Vector(this.x * v.x, this.y * v.y, this.z * v.z);\n        else\n            return new Vector(this.x * v, this.y * v, this.z * v);\n    }\n    /**\n     * Divide this vector by a vector or a number.\n     * @param {Vector | number} a: Vector or number to divide\n     * @returns {Vector} New vector\n     */\n    divide(v) {\n        if (v instanceof Vector)\n            return new Vector(this.x / v.x, this.y / v.y, this.z / v.z);\n        else\n            return new Vector(this.x / v, this.y / v, this.z / v);\n    }\n    /**\n     * Check if the given vector is equal to this vector.\n     * @param {Vector} v: Vector to compare\n     * @returns {boolean} True if equal\n     */\n    equals(v) {\n        return this.x == v.x && this.y == v.y && this.z == v.z;\n    }\n    /**\n     * Returns the dot product of this vector and another vector.\n     * @param {Vector} v: Vector to dot\n     * @returns {number} Dot product\n     */\n    dot(v) {\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n    }\n    /**\n     * Cross product of two vectors.\n     * @param {Vector} a: Vector to cross\n     * @param {Vector} b: Vector to cross\n     */\n    cross(v) {\n        return new Vector(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x);\n    }\n    /**\n     * Get the length of the Vector\n     * @returns {number} Length\n     */\n    length() {\n        return Math.sqrt(this.dot(this));\n    }\n    /**\n     * Find the distance between this and another vector.\n     * @param {Vector} v: Vector to find distance to\n     * @param {2 | 3} d: 2D or 3D distance\n     * @returns {number} Distance\n     */\n    distance(v, d = 3) {\n        //2D distance\n        if (d === 2)\n            return Math.sqrt(Math.pow(this.x - v.x, 2) + Math.pow(this.y - v.y, 2));\n        //3D distance\n        else\n            return Math.sqrt(Math.pow(this.x - v.x, 2) + Math.pow(this.y - v.y, 2) + Math.pow(this.z - v.z, 2));\n    }\n    /**\n     * Lerp between this vector and another vector.\n     * @param {Vector} v: Vector to lerp to\n     * @param {number} fraction: Fraction to lerp\n     * @returns {Vector}\n     */\n    lerp(v, fraction) {\n        return v.subtract(this).multiply(fraction).add(this);\n    }\n    /**\n     * Returns the unit vector of this vector.\n     * @returns {Vector} Unit vector\n     */\n    unit() {\n        return this.divide(this.length());\n    }\n    min() {\n        return Math.min(Math.min(this.x, this.y), this.z);\n    }\n    max() {\n        return Math.max(Math.max(this.x, this.y), this.z);\n    }\n    /**\n     * To Angles\n     * @param {AxisMap} [axisMap = {x: \"x\", y: \"y\", z: \"z\"}]\n     * @returns {{ theta: number, phi: number }}\n     */\n    toSphericalCoords(axisMap = { x: \"x\", y: \"y\", z: \"z\" }) {\n        return {\n            theta: Math.atan2(this[axisMap.y], this[axisMap.x]),\n            phi: Math.acos(this[axisMap.z] / this.length()),\n        };\n    }\n    /**\n     * Returns the angle between this vector and vector a in radians.\n     * @param {Vector} a: Vector\n     * @returns {number}\n     */\n    angleTo(a) {\n        return Math.acos(this.dot(a) / (this.length() * a.length()));\n    }\n    /**\n     * Array representation of the vector.\n     * @param {number} n: Array length\n     * @returns {number[]} Array\n     * @example\n     * new Vector(1, 2, 3).toArray(); // [1, 2, 3]\n     */\n    toArray(n) {\n        return [this.x, this.y, this.z].slice(0, n || 3);\n    }\n    /**\n     * Clone the vector.\n     * @returns {Vector} New vector\n     */\n    clone() {\n        return new Vector(this.x, this.y, this.z);\n    }\n    /**\n     * Init this Vector with explicit values\n     * @param {number} x: X value\n     * @param {number} y: Y value\n     * @param {number} z: Z value\n     */\n    init(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        return this;\n    }\n    // static methods //\n    static negative(a, b = new Vector()) {\n        b.x = -a.x;\n        b.y = -a.y;\n        b.z = -a.z;\n        return b;\n    }\n    static add(a, b, c = new Vector()) {\n        if (b instanceof Vector) {\n            c.x = a.x + b.x;\n            c.y = a.y + b.y;\n            c.z = a.z + b.z;\n        }\n        else {\n            c.x = a.x + b;\n            c.y = a.y + b;\n            c.z = a.z + b;\n        }\n        return c;\n    }\n    static subtract(a, b, c = new Vector()) {\n        if (b instanceof Vector) {\n            c.x = a.x - b.x;\n            c.y = a.y - b.y;\n            c.z = a.z - b.z;\n        }\n        else {\n            c.x = a.x - b;\n            c.y = a.y - b;\n            c.z = a.z - b;\n        }\n        return c;\n    }\n    static multiply(a, b, c = new Vector()) {\n        if (b instanceof Vector) {\n            c.x = a.x * b.x;\n            c.y = a.y * b.y;\n            c.z = a.z * b.z;\n        }\n        else {\n            c.x = a.x * b;\n            c.y = a.y * b;\n            c.z = a.z * b;\n        }\n        return c;\n    }\n    static divide(a, b, c = new Vector()) {\n        if (b instanceof Vector) {\n            c.x = a.x / b.x;\n            c.y = a.y / b.y;\n            c.z = a.z / b.z;\n        }\n        else {\n            c.x = a.x / b;\n            c.y = a.y / b;\n            c.z = a.z / b;\n        }\n        return c;\n    }\n    static cross(a, b, c = new Vector()) {\n        c.x = a.y * b.z - a.z * b.y;\n        c.y = a.z * b.x - a.x * b.z;\n        c.z = a.x * b.y - a.y * b.x;\n        return c;\n    }\n    static unit(a, b) {\n        const length = a.length();\n        b.x = a.x / length;\n        b.y = a.y / length;\n        b.z = a.z / length;\n        return b;\n    }\n    /**\n     * Create new vector from angles\n     * @param {number} theta: Theta angle\n     * @param {number} phi: Phi angle\n     * @returns {Vector} New vector\n     */\n    static fromAngles(theta, phi) {\n        return new Vector(Math.cos(theta) * Math.cos(phi), Math.sin(phi), Math.sin(theta) * Math.cos(phi));\n    }\n    static randomDirection() {\n        return Vector.fromAngles(Math.random() * TWO_PI, Math.asin(Math.random() * 2 - 1));\n    }\n    static min(a, b) {\n        return new Vector(Math.min(a.x, b.x), Math.min(a.y, b.y), Math.min(a.z, b.z));\n    }\n    static max(a, b) {\n        return new Vector(Math.max(a.x, b.x), Math.max(a.y, b.y), Math.max(a.z, b.z));\n    }\n    /**\n     * Lerp between two vectors\n     * @param {Vector} a: Vector a\n     * @param {Vector} b: Vector b\n     * @param {number} fraction: Fraction\n     */\n    static lerp(a, b, fraction) {\n        if (b instanceof Vector) {\n            return b.subtract(a).multiply(fraction).add(a);\n        }\n        else {\n            return ((b - a) * fraction + a);\n        }\n    }\n    /**\n     * Create a new vector from an Array\n     * @param {number[]} array: Array\n     * @returns {Vector} New vector\n     */\n    static fromArray(a) {\n        if (Array.isArray(a)) {\n            return new Vector(a[0], a[1], a[2]);\n        }\n        return new Vector(a.x, a.y, a.z);\n    }\n    /**\n     * Angle between two vectors\n     * @param {Vector} a: Vector a\n     * @param {Vector} b: Vector b\n     * @returns\n     */\n    static angleBetween(a, b) {\n        return a.angleTo(b);\n    }\n    static distance(a, b, d) {\n        if (d === 2)\n            return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n        else\n            return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2) + Math.pow(a.z - b.z, 2));\n    }\n    static toDegrees(a) {\n        return a * (180 / PI);\n    }\n    static normalizeAngle(radians) {\n        let angle = radians % TWO_PI;\n        angle = angle > PI ? angle - TWO_PI : angle < -PI ? TWO_PI + angle : angle;\n        //returns normalized values to -1,1\n        return angle / PI;\n    }\n    static normalizeRadians(radians) {\n        if (radians >= PI / 2) {\n            radians -= TWO_PI;\n        }\n        if (radians <= -PI / 2) {\n            radians += TWO_PI;\n            radians = PI - radians;\n        }\n        //returns normalized values to -1,1\n        return radians / PI;\n    }\n    static find2DAngle(cx, cy, ex, ey) {\n        const dy = ey - cy;\n        const dx = ex - cx;\n        const theta = Math.atan2(dy, dx);\n        return theta;\n    }\n    /**\n     * Find 3D rotation between two vectors\n     * @param {Vector} a: First vector\n     * @param {Vector} b: Second vector\n     * @param {boolean} normalize: Normalize the result\n     */\n    static findRotation(a, b, normalize = true) {\n        if (normalize) {\n            return new Vector(Vector.normalizeRadians(Vector.find2DAngle(a.z, a.x, b.z, b.x)), Vector.normalizeRadians(Vector.find2DAngle(a.z, a.y, b.z, b.y)), Vector.normalizeRadians(Vector.find2DAngle(a.x, a.y, b.x, b.y)));\n        }\n        else {\n            return new Vector(Vector.find2DAngle(a.z, a.x, b.z, b.x), Vector.find2DAngle(a.z, a.y, b.z, b.y), Vector.find2DAngle(a.x, a.y, b.x, b.y));\n        }\n    }\n    /**\n     * Find roll pitch yaw of plane formed by 3 points\n     * @param {Vector} a: Vector\n     * @param {Vector} b: Vector\n     * @param {Vector} c: Vector\n     */\n    static rollPitchYaw(a, b, c) {\n        if (!c) {\n            return new Vector(Vector.normalizeAngle(Vector.find2DAngle(a.z, a.y, b.z, b.y)), Vector.normalizeAngle(Vector.find2DAngle(a.z, a.x, b.z, b.x)), Vector.normalizeAngle(Vector.find2DAngle(a.x, a.y, b.x, b.y)));\n        }\n        const qb = b.subtract(a);\n        const qc = c.subtract(a);\n        const n = qb.cross(qc);\n        const unitZ = n.unit();\n        const unitX = qb.unit();\n        const unitY = unitZ.cross(unitX);\n        const beta = Math.asin(unitZ.x) || 0;\n        const alpha = Math.atan2(-unitZ.y, unitZ.z) || 0;\n        const gamma = Math.atan2(-unitY.x, unitX.x) || 0;\n        return new Vector(Vector.normalizeAngle(alpha), Vector.normalizeAngle(beta), Vector.normalizeAngle(gamma));\n    }\n    /**\n     * Find angle between 3D Coordinates\n     * @param {Vector | number} a: Vector or Number\n     * @param {Vector | number} b: Vector or Number\n     * @param {Vector | number} c: Vector or Number\n     */\n    static angleBetween3DCoords(a, b, c) {\n        if (!(a instanceof Vector)) {\n            a = new Vector(a);\n            b = new Vector(b);\n            c = new Vector(c);\n        }\n        // Calculate vector between points 1 and 2\n        const v1 = a.subtract(b);\n        // Calculate vector between points 2 and 3\n        const v2 = c.subtract(b);\n        // The dot product of vectors v1 & v2 is a function of the cosine of the\n        // angle between them (it's scaled by the product of their magnitudes).\n        const v1norm = v1.unit();\n        const v2norm = v2.unit();\n        // Calculate the dot products of vectors v1 and v2\n        const dotProducts = v1norm.dot(v2norm);\n        // Extract the angle from the dot products\n        const angle = Math.acos(dotProducts);\n        // return single angle Normalized to 1\n        return Vector.normalizeRadians(angle);\n    }\n    /**\n     * Get normalized, spherical coordinates for the vector bc, relative to vector ab\n     * @param {Vector | number} a: Vector or Number\n     * @param {Vector | number} b: Vector or Number\n     * @param {Vector | number} c: Vector or Number\n     * @param {AxisMap} axisMap: Mapped axis to get the right spherical coords\n     */\n    static getRelativeSphericalCoords(a, b, c, axisMap) {\n        if (!(a instanceof Vector)) {\n            a = new Vector(a);\n            b = new Vector(b);\n            c = new Vector(c);\n        }\n        // Calculate vector between points 1 and 2\n        const v1 = b.subtract(a);\n        // Calculate vector between points 2 and 3\n        const v2 = c.subtract(b);\n        const v1norm = v1.unit();\n        const v2norm = v2.unit();\n        const { theta: theta1, phi: phi1 } = v1norm.toSphericalCoords(axisMap);\n        const { theta: theta2, phi: phi2 } = v2norm.toSphericalCoords(axisMap);\n        const theta = theta1 - theta2;\n        const phi = phi1 - phi2;\n        return {\n            theta: Vector.normalizeAngle(theta),\n            phi: Vector.normalizeAngle(phi),\n        };\n    }\n    /**\n     * Get normalized, spherical coordinates for the vector bc\n     * @param {Vector | number} a: Vector or Number\n     * @param {Vector | number} b: Vector or Number\n     * @param {AxisMap} axisMap: Mapped axis to get the right spherical coords\n     */\n    static getSphericalCoords(a, b, axisMap = { x: \"x\", y: \"y\", z: \"z\" }) {\n        if (!(a instanceof Vector)) {\n            a = new Vector(a);\n            b = new Vector(b);\n        }\n        // Calculate vector between points 1 and 2\n        const v1 = b.subtract(a);\n        const v1norm = v1.unit();\n        const { theta, phi } = v1norm.toSphericalCoords(axisMap);\n        return {\n            theta: Vector.normalizeAngle(-theta),\n            phi: Vector.normalizeAngle(PI / 2 - phi),\n        };\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}