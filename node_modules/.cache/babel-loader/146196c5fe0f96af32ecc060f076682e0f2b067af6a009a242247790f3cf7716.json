{"ast":null,"code":"import Vector from \"../utils/vector\";\nimport { clamp } from \"../utils/helpers\";\nimport { RIGHT, LEFT } from \"./../constants\";\nimport { PI } from \"./../constants\";\n/** Class representing hand solver. */\nexport class HandSolver {\n  /**\n   * Calculates finger and wrist as euler rotations\n   * @param {Array} lm : array of 3D hand vectors from tfjs or mediapipe\n   * @param {Side} side: left or right\n   */\n  static solve(lm) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : RIGHT;\n    if (!lm) {\n      console.error(\"Need Hand Landmarks\");\n      return;\n    }\n    const palm = [new Vector(lm[0]), new Vector(lm[side === RIGHT ? 17 : 5]), new Vector(lm[side === RIGHT ? 5 : 17])];\n    const handRotation = Vector.rollPitchYaw(palm[0], palm[1], palm[2]);\n    handRotation.y = handRotation.z;\n    handRotation.y -= side === LEFT ? 0.4 : 0.4;\n    let hand = {};\n    hand[side + \"Wrist\"] = {\n      x: handRotation.x,\n      y: handRotation.y,\n      z: handRotation.z\n    };\n    hand[side + \"RingProximal\"] = {\n      x: 0,\n      y: 0,\n      z: Vector.angleBetween3DCoords(lm[0], lm[13], lm[14])\n    };\n    hand[side + \"RingIntermediate\"] = {\n      x: 0,\n      y: 0,\n      z: Vector.angleBetween3DCoords(lm[13], lm[14], lm[15])\n    };\n    hand[side + \"RingDistal\"] = {\n      x: 0,\n      y: 0,\n      z: Vector.angleBetween3DCoords(lm[14], lm[15], lm[16])\n    };\n    hand[side + \"IndexProximal\"] = {\n      x: 0,\n      y: 0,\n      z: Vector.angleBetween3DCoords(lm[0], lm[5], lm[6])\n    };\n    hand[side + \"IndexIntermediate\"] = {\n      x: 0,\n      y: 0,\n      z: Vector.angleBetween3DCoords(lm[5], lm[6], lm[7])\n    };\n    hand[side + \"IndexDistal\"] = {\n      x: 0,\n      y: 0,\n      z: Vector.angleBetween3DCoords(lm[6], lm[7], lm[8])\n    };\n    hand[side + \"MiddleProximal\"] = {\n      x: 0,\n      y: 0,\n      z: Vector.angleBetween3DCoords(lm[0], lm[9], lm[10])\n    };\n    hand[side + \"MiddleIntermediate\"] = {\n      x: 0,\n      y: 0,\n      z: Vector.angleBetween3DCoords(lm[9], lm[10], lm[11])\n    };\n    hand[side + \"MiddleDistal\"] = {\n      x: 0,\n      y: 0,\n      z: Vector.angleBetween3DCoords(lm[10], lm[11], lm[12])\n    };\n    hand[side + \"ThumbProximal\"] = {\n      x: 0,\n      y: 0,\n      z: Vector.angleBetween3DCoords(lm[0], lm[1], lm[2])\n    };\n    hand[side + \"ThumbIntermediate\"] = {\n      x: 0,\n      y: 0,\n      z: Vector.angleBetween3DCoords(lm[1], lm[2], lm[3])\n    };\n    hand[side + \"ThumbDistal\"] = {\n      x: 0,\n      y: 0,\n      z: Vector.angleBetween3DCoords(lm[2], lm[3], lm[4])\n    };\n    hand[side + \"LittleProximal\"] = {\n      x: 0,\n      y: 0,\n      z: Vector.angleBetween3DCoords(lm[0], lm[17], lm[18])\n    };\n    hand[side + \"LittleIntermediate\"] = {\n      x: 0,\n      y: 0,\n      z: Vector.angleBetween3DCoords(lm[17], lm[18], lm[19])\n    };\n    hand[side + \"LittleDistal\"] = {\n      x: 0,\n      y: 0,\n      z: Vector.angleBetween3DCoords(lm[18], lm[19], lm[20])\n    };\n    hand = rigFingers(hand, side);\n    return hand;\n  }\n}\n/**\n * Converts normalized rotation values into radians clamped by human limits\n * @param {Object} hand : object of labeled joint with normalized rotation values\n * @param {Side} side : left or right\n */\nconst rigFingers = function (hand) {\n  let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : RIGHT;\n  // Invert modifier based on left vs right side\n  const invert = side === RIGHT ? 1 : -1;\n  const digits = [\"Ring\", \"Index\", \"Little\", \"Thumb\", \"Middle\"];\n  const segments = [\"Proximal\", \"Intermediate\", \"Distal\"];\n  hand[side + \"Wrist\"].x = clamp(hand[side + \"Wrist\"].x * 2 * invert, -0.3, 0.3); // twist\n  hand[side + \"Wrist\"].y = clamp(hand[side + \"Wrist\"].y * 2.3, side === RIGHT ? -1.2 : -0.6, side === RIGHT ? 0.6 : 1.6);\n  hand[side + \"Wrist\"].z = hand[side + \"Wrist\"].z * -2.3 * invert; //left right\n  digits.forEach(e => {\n    segments.forEach(j => {\n      const trackedFinger = hand[side + e + j];\n      if (e === \"Thumb\") {\n        //dampen thumb rotation depending on segment\n        const dampener = {\n          x: j === \"Proximal\" ? 2.2 : j === \"Intermediate\" ? 0 : 0,\n          y: j === \"Proximal\" ? 2.2 : j === \"Intermediate\" ? 0.7 : 1,\n          z: j === \"Proximal\" ? 0.5 : j === \"Intermediate\" ? 0.5 : 0.5\n        };\n        const startPos = {\n          x: j === \"Proximal\" ? 1.2 : j === \"Distal\" ? -0.2 : -0.2,\n          y: j === \"Proximal\" ? 1.1 * invert : j === \"Distal\" ? 0.1 * invert : 0.1 * invert,\n          z: j === \"Proximal\" ? 0.2 * invert : j === \"Distal\" ? 0.2 * invert : 0.2 * invert\n        };\n        const newThumb = {\n          x: 0,\n          y: 0,\n          z: 0\n        };\n        if (j === \"Proximal\") {\n          newThumb.z = clamp(startPos.z + trackedFinger.z * -PI * dampener.z * invert, side === RIGHT ? -0.6 : -0.3, side === RIGHT ? 0.3 : 0.6);\n          newThumb.x = clamp(startPos.x + trackedFinger.z * -PI * dampener.x, -0.6, 0.3);\n          newThumb.y = clamp(startPos.y + trackedFinger.z * -PI * dampener.y * invert, side === RIGHT ? -1 : -0.3, side === RIGHT ? 0.3 : 1);\n        } else {\n          newThumb.z = clamp(startPos.z + trackedFinger.z * -PI * dampener.z * invert, -2, 2);\n          newThumb.x = clamp(startPos.x + trackedFinger.z * -PI * dampener.x, -2, 2);\n          newThumb.y = clamp(startPos.y + trackedFinger.z * -PI * dampener.y * invert, -2, 2);\n        }\n        trackedFinger.x = newThumb.x;\n        trackedFinger.y = newThumb.y;\n        trackedFinger.z = newThumb.z;\n      } else {\n        //will document human limits later\n        trackedFinger.z = clamp(trackedFinger.z * -PI * invert, side === RIGHT ? -PI : 0, side === RIGHT ? 0 : PI);\n      }\n    });\n  });\n  return hand;\n};","map":{"version":3,"names":["Vector","clamp","RIGHT","LEFT","PI","HandSolver","solve","lm","side","arguments","length","undefined","console","error","palm","handRotation","rollPitchYaw","y","z","hand","x","angleBetween3DCoords","rigFingers","invert","digits","segments","forEach","e","j","trackedFinger","dampener","startPos","newThumb"],"sources":["/Users/hzh-mac/Downloads/VRM/vrm-app/node_modules/kalidokit/dist/HandSolver/index.js"],"sourcesContent":["import Vector from \"../utils/vector\";\nimport { clamp } from \"../utils/helpers\";\nimport { RIGHT, LEFT } from \"./../constants\";\nimport { PI } from \"./../constants\";\n/** Class representing hand solver. */\nexport class HandSolver {\n    /**\n     * Calculates finger and wrist as euler rotations\n     * @param {Array} lm : array of 3D hand vectors from tfjs or mediapipe\n     * @param {Side} side: left or right\n     */\n    static solve(lm, side = RIGHT) {\n        if (!lm) {\n            console.error(\"Need Hand Landmarks\");\n            return;\n        }\n        const palm = [\n            new Vector(lm[0]),\n            new Vector(lm[side === RIGHT ? 17 : 5]),\n            new Vector(lm[side === RIGHT ? 5 : 17]),\n        ];\n        const handRotation = Vector.rollPitchYaw(palm[0], palm[1], palm[2]);\n        handRotation.y = handRotation.z;\n        handRotation.y -= side === LEFT ? 0.4 : 0.4;\n        let hand = {};\n        hand[side + \"Wrist\"] = { x: handRotation.x, y: handRotation.y, z: handRotation.z };\n        hand[side + \"RingProximal\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[0], lm[13], lm[14]) };\n        hand[side + \"RingIntermediate\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[13], lm[14], lm[15]) };\n        hand[side + \"RingDistal\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[14], lm[15], lm[16]) };\n        hand[side + \"IndexProximal\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[0], lm[5], lm[6]) };\n        hand[side + \"IndexIntermediate\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[5], lm[6], lm[7]) };\n        hand[side + \"IndexDistal\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[6], lm[7], lm[8]) };\n        hand[side + \"MiddleProximal\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[0], lm[9], lm[10]) };\n        hand[side + \"MiddleIntermediate\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[9], lm[10], lm[11]) };\n        hand[side + \"MiddleDistal\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[10], lm[11], lm[12]) };\n        hand[side + \"ThumbProximal\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[0], lm[1], lm[2]) };\n        hand[side + \"ThumbIntermediate\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[1], lm[2], lm[3]) };\n        hand[side + \"ThumbDistal\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[2], lm[3], lm[4]) };\n        hand[side + \"LittleProximal\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[0], lm[17], lm[18]) };\n        hand[side + \"LittleIntermediate\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[17], lm[18], lm[19]) };\n        hand[side + \"LittleDistal\"] = { x: 0, y: 0, z: Vector.angleBetween3DCoords(lm[18], lm[19], lm[20]) };\n        hand = rigFingers(hand, side);\n        return hand;\n    }\n}\n/**\n * Converts normalized rotation values into radians clamped by human limits\n * @param {Object} hand : object of labeled joint with normalized rotation values\n * @param {Side} side : left or right\n */\nconst rigFingers = (hand, side = RIGHT) => {\n    // Invert modifier based on left vs right side\n    const invert = side === RIGHT ? 1 : -1;\n    const digits = [\"Ring\", \"Index\", \"Little\", \"Thumb\", \"Middle\"];\n    const segments = [\"Proximal\", \"Intermediate\", \"Distal\"];\n    hand[side + \"Wrist\"].x = clamp(hand[side + \"Wrist\"].x * 2 * invert, -0.3, 0.3); // twist\n    hand[side + \"Wrist\"].y = clamp(hand[side + \"Wrist\"].y * 2.3, side === RIGHT ? -1.2 : -0.6, side === RIGHT ? 0.6 : 1.6);\n    hand[side + \"Wrist\"].z = hand[side + \"Wrist\"].z * -2.3 * invert; //left right\n    digits.forEach((e) => {\n        segments.forEach((j) => {\n            const trackedFinger = hand[side + e + j];\n            if (e === \"Thumb\") {\n                //dampen thumb rotation depending on segment\n                const dampener = {\n                    x: j === \"Proximal\" ? 2.2 : j === \"Intermediate\" ? 0 : 0,\n                    y: j === \"Proximal\" ? 2.2 : j === \"Intermediate\" ? 0.7 : 1,\n                    z: j === \"Proximal\" ? 0.5 : j === \"Intermediate\" ? 0.5 : 0.5,\n                };\n                const startPos = {\n                    x: j === \"Proximal\" ? 1.2 : j === \"Distal\" ? -0.2 : -0.2,\n                    y: j === \"Proximal\" ? 1.1 * invert : j === \"Distal\" ? 0.1 * invert : 0.1 * invert,\n                    z: j === \"Proximal\" ? 0.2 * invert : j === \"Distal\" ? 0.2 * invert : 0.2 * invert,\n                };\n                const newThumb = { x: 0, y: 0, z: 0 };\n                if (j === \"Proximal\") {\n                    newThumb.z = clamp(startPos.z + trackedFinger.z * -PI * dampener.z * invert, side === RIGHT ? -0.6 : -0.3, side === RIGHT ? 0.3 : 0.6);\n                    newThumb.x = clamp(startPos.x + trackedFinger.z * -PI * dampener.x, -0.6, 0.3);\n                    newThumb.y = clamp(startPos.y + trackedFinger.z * -PI * dampener.y * invert, side === RIGHT ? -1 : -0.3, side === RIGHT ? 0.3 : 1);\n                }\n                else {\n                    newThumb.z = clamp(startPos.z + trackedFinger.z * -PI * dampener.z * invert, -2, 2);\n                    newThumb.x = clamp(startPos.x + trackedFinger.z * -PI * dampener.x, -2, 2);\n                    newThumb.y = clamp(startPos.y + trackedFinger.z * -PI * dampener.y * invert, -2, 2);\n                }\n                trackedFinger.x = newThumb.x;\n                trackedFinger.y = newThumb.y;\n                trackedFinger.z = newThumb.z;\n            }\n            else {\n                //will document human limits later\n                trackedFinger.z = clamp(trackedFinger.z * -PI * invert, side === RIGHT ? -PI : 0, side === RIGHT ? 0 : PI);\n            }\n        });\n    });\n    return hand;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}