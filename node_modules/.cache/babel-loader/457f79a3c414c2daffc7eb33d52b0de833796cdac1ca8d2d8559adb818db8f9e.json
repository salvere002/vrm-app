{"ast":null,"code":"import Vector from \"../utils/vector\";\nimport { clamp, remap } from \"../utils/helpers\";\nimport { RIGHT, LEFT } from \"./../constants\";\n/**\n * Landmark points labeled for eye, brow, and pupils\n */\nconst points = {\n  eye: {\n    [LEFT]: [130, 133, 160, 159, 158, 144, 145, 153],\n    [RIGHT]: [263, 362, 387, 386, 385, 373, 374, 380]\n  },\n  brow: {\n    [LEFT]: [35, 244, 63, 105, 66, 229, 230, 231],\n    [RIGHT]: [265, 464, 293, 334, 296, 449, 450, 451]\n  },\n  pupil: {\n    [LEFT]: [468, 469, 470, 471, 472],\n    [RIGHT]: [473, 474, 475, 476, 477]\n  }\n};\n/**\n * Calculate eye open ratios and remap to 0-1\n * @param {Array} lm : array of results from tfjs or mediapipe\n * @param {Side} side : designate left or right\n * @param {Number} high : ratio at which eye is considered open\n * @param {Number} low : ratio at which eye is comsidered closed\n */\nexport const getEyeOpen = function (lm) {\n  let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LEFT;\n  let {\n    high = 0.85,\n    low = 0.55\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const eyePoints = points.eye[side];\n  const eyeDistance = eyeLidRatio(lm[eyePoints[0]], lm[eyePoints[1]], lm[eyePoints[2]], lm[eyePoints[3]], lm[eyePoints[4]], lm[eyePoints[5]], lm[eyePoints[6]], lm[eyePoints[7]]);\n  // human eye width to height ratio is roughly .3\n  const maxRatio = 0.285;\n  // compare ratio against max ratio\n  const ratio = clamp(eyeDistance / maxRatio, 0, 2);\n  // remap eye open and close ratios to increase sensitivity\n  const eyeOpenRatio = remap(ratio, low, high);\n  return {\n    // remapped ratio\n    norm: eyeOpenRatio,\n    // ummapped ratio\n    raw: ratio\n  };\n};\n/**\n * Calculate eyelid distance ratios based on landmarks on the face\n */\nexport const eyeLidRatio = (eyeOuterCorner, eyeInnerCorner, eyeOuterUpperLid, eyeMidUpperLid, eyeInnerUpperLid, eyeOuterLowerLid, eyeMidLowerLid, eyeInnerLowerLid) => {\n  eyeOuterCorner = new Vector(eyeOuterCorner);\n  eyeInnerCorner = new Vector(eyeInnerCorner);\n  eyeOuterUpperLid = new Vector(eyeOuterUpperLid);\n  eyeMidUpperLid = new Vector(eyeMidUpperLid);\n  eyeInnerUpperLid = new Vector(eyeInnerUpperLid);\n  eyeOuterLowerLid = new Vector(eyeOuterLowerLid);\n  eyeMidLowerLid = new Vector(eyeMidLowerLid);\n  eyeInnerLowerLid = new Vector(eyeInnerLowerLid);\n  //use 2D Distances instead of 3D for less jitter\n  const eyeWidth = eyeOuterCorner.distance(eyeInnerCorner, 2);\n  const eyeOuterLidDistance = eyeOuterUpperLid.distance(eyeOuterLowerLid, 2);\n  const eyeMidLidDistance = eyeMidUpperLid.distance(eyeMidLowerLid, 2);\n  const eyeInnerLidDistance = eyeInnerUpperLid.distance(eyeInnerLowerLid, 2);\n  const eyeLidAvg = (eyeOuterLidDistance + eyeMidLidDistance + eyeInnerLidDistance) / 3;\n  const ratio = eyeLidAvg / eyeWidth;\n  return ratio;\n};\n/**\n * Calculate pupil position [-1,1]\n * @param {Results} lm : array of results from tfjs or mediapipe\n * @param {Side} side : left or right\n */\nexport const pupilPos = function (lm) {\n  let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LEFT;\n  const eyeOuterCorner = new Vector(lm[points.eye[side][0]]);\n  const eyeInnerCorner = new Vector(lm[points.eye[side][1]]);\n  const eyeWidth = eyeOuterCorner.distance(eyeInnerCorner, 2);\n  const midPoint = eyeOuterCorner.lerp(eyeInnerCorner, 0.5);\n  const pupil = new Vector(lm[points.pupil[side][0]]);\n  const dx = midPoint.x - pupil.x;\n  //eye center y is slightly above midpoint\n  const dy = midPoint.y - eyeWidth * 0.075 - pupil.y;\n  let ratioX = dx / (eyeWidth / 2);\n  let ratioY = dy / (eyeWidth / 4);\n  ratioX *= 4;\n  ratioY *= 4;\n  return {\n    x: ratioX,\n    y: ratioY\n  };\n};\n/**\n * Method to stabilize blink speeds to fix inconsistent eye open/close timing\n * @param {Object} eye : object with left and right eye values\n * @param {Number} headY : head y axis rotation in radians\n * @param {Object} options: Options for blink stabilization\n */\nexport const stabilizeBlink = function (eye, headY) {\n  let {\n    enableWink = true,\n    maxRot = 0.5\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  eye.r = clamp(eye.r, 0, 1);\n  eye.l = clamp(eye.l, 0, 1);\n  //difference between each eye\n  const blinkDiff = Math.abs(eye.l - eye.r);\n  //theshold to which difference is considered a wink\n  const blinkThresh = enableWink ? 0.8 : 1.2;\n  //detect when both eyes are closing\n  const isClosing = eye.l < 0.3 && eye.r < 0.3;\n  //detect when both eyes are opening\n  const isOpen = eye.l > 0.6 && eye.r > 0.6;\n  // sets obstructed eye to the opposite eye value\n  if (headY > maxRot) {\n    return {\n      l: eye.r,\n      r: eye.r\n    };\n  }\n  if (headY < -maxRot) {\n    return {\n      l: eye.l,\n      r: eye.l\n    };\n  }\n  // returns either a wink or averaged blink values\n  return {\n    l: blinkDiff >= blinkThresh && !isClosing && !isOpen ? eye.l : eye.r > eye.l ? Vector.lerp(eye.r, eye.l, 0.95) : Vector.lerp(eye.r, eye.l, 0.05),\n    r: blinkDiff >= blinkThresh && !isClosing && !isOpen ? eye.r : eye.r > eye.l ? Vector.lerp(eye.r, eye.l, 0.95) : Vector.lerp(eye.r, eye.l, 0.05)\n  };\n};\n/**\n * Calculate Eyes\n * @param {Array} lm : array of results from tfjs or mediapipe\n */\nexport const calcEyes = function (lm) {\n  let {\n    high = 0.85,\n    low = 0.55\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  //return early if no iris tracking\n  if (lm.length !== 478) {\n    return {\n      l: 1,\n      r: 1\n    };\n  }\n  //open [0,1]\n  const leftEyeLid = getEyeOpen(lm, LEFT, {\n    high: high,\n    low: low\n  });\n  const rightEyeLid = getEyeOpen(lm, RIGHT, {\n    high: high,\n    low: low\n  });\n  return {\n    l: leftEyeLid.norm || 0,\n    r: rightEyeLid.norm || 0\n  };\n};\n/**\n * Calculate pupil location normalized to eye bounds\n * @param {Array} lm : array of results from tfjs or mediapipe\n */\nexport const calcPupils = lm => {\n  //pupil x:[-1,1],y:[-1,1]\n  if (lm.length !== 478) {\n    return {\n      x: 0,\n      y: 0\n    };\n  } else {\n    //track pupils using left eye\n    const pupilL = pupilPos(lm, LEFT);\n    const pupilR = pupilPos(lm, RIGHT);\n    return {\n      x: (pupilL.x + pupilR.x) * 0.5 || 0,\n      y: (pupilL.y + pupilR.y) * 0.5 || 0\n    };\n  }\n};\n/**\n * Calculate brow raise\n * @param {Results} lm : array of results from tfjs or mediapipe\n * @param {Side} side : designate left or right\n */\nexport const getBrowRaise = function (lm) {\n  let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LEFT;\n  const browPoints = points.brow[side];\n  const browDistance = eyeLidRatio(lm[browPoints[0]], lm[browPoints[1]], lm[browPoints[2]], lm[browPoints[3]], lm[browPoints[4]], lm[browPoints[5]], lm[browPoints[6]], lm[browPoints[7]]);\n  const maxBrowRatio = 1.15;\n  const browHigh = 0.125;\n  const browLow = 0.07;\n  const browRatio = browDistance / maxBrowRatio - 1;\n  const browRaiseRatio = (clamp(browRatio, browLow, browHigh) - browLow) / (browHigh - browLow);\n  return browRaiseRatio;\n};\n/**\n * Take the average of left and right eyebrow raise values\n * @param {Array} lm : array of results from tfjs or mediapipe\n */\nexport const calcBrow = lm => {\n  if (lm.length !== 478) {\n    return 0;\n  } else {\n    const leftBrow = getBrowRaise(lm, LEFT);\n    const rightBrow = getBrowRaise(lm, RIGHT);\n    return (leftBrow + rightBrow) / 2 || 0;\n  }\n};","map":{"version":3,"names":["Vector","clamp","remap","RIGHT","LEFT","points","eye","brow","pupil","getEyeOpen","lm","side","arguments","length","undefined","high","low","eyePoints","eyeDistance","eyeLidRatio","maxRatio","ratio","eyeOpenRatio","norm","raw","eyeOuterCorner","eyeInnerCorner","eyeOuterUpperLid","eyeMidUpperLid","eyeInnerUpperLid","eyeOuterLowerLid","eyeMidLowerLid","eyeInnerLowerLid","eyeWidth","distance","eyeOuterLidDistance","eyeMidLidDistance","eyeInnerLidDistance","eyeLidAvg","pupilPos","midPoint","lerp","dx","x","dy","y","ratioX","ratioY","stabilizeBlink","headY","enableWink","maxRot","r","l","blinkDiff","Math","abs","blinkThresh","isClosing","isOpen","calcEyes","leftEyeLid","rightEyeLid","calcPupils","pupilL","pupilR","getBrowRaise","browPoints","browDistance","maxBrowRatio","browHigh","browLow","browRatio","browRaiseRatio","calcBrow","leftBrow","rightBrow"],"sources":["/Users/hzh-mac/Downloads/VRM/vrm-app/node_modules/kalidokit/dist/FaceSolver/calcEyes.js"],"sourcesContent":["import Vector from \"../utils/vector\";\nimport { clamp, remap } from \"../utils/helpers\";\nimport { RIGHT, LEFT } from \"./../constants\";\n/**\n * Landmark points labeled for eye, brow, and pupils\n */\nconst points = {\n    eye: {\n        [LEFT]: [130, 133, 160, 159, 158, 144, 145, 153],\n        [RIGHT]: [263, 362, 387, 386, 385, 373, 374, 380],\n    },\n    brow: {\n        [LEFT]: [35, 244, 63, 105, 66, 229, 230, 231],\n        [RIGHT]: [265, 464, 293, 334, 296, 449, 450, 451],\n    },\n    pupil: {\n        [LEFT]: [468, 469, 470, 471, 472],\n        [RIGHT]: [473, 474, 475, 476, 477],\n    },\n};\n/**\n * Calculate eye open ratios and remap to 0-1\n * @param {Array} lm : array of results from tfjs or mediapipe\n * @param {Side} side : designate left or right\n * @param {Number} high : ratio at which eye is considered open\n * @param {Number} low : ratio at which eye is comsidered closed\n */\nexport const getEyeOpen = (lm, side = LEFT, { high = 0.85, low = 0.55 } = {}) => {\n    const eyePoints = points.eye[side];\n    const eyeDistance = eyeLidRatio(lm[eyePoints[0]], lm[eyePoints[1]], lm[eyePoints[2]], lm[eyePoints[3]], lm[eyePoints[4]], lm[eyePoints[5]], lm[eyePoints[6]], lm[eyePoints[7]]);\n    // human eye width to height ratio is roughly .3\n    const maxRatio = 0.285;\n    // compare ratio against max ratio\n    const ratio = clamp(eyeDistance / maxRatio, 0, 2);\n    // remap eye open and close ratios to increase sensitivity\n    const eyeOpenRatio = remap(ratio, low, high);\n    return {\n        // remapped ratio\n        norm: eyeOpenRatio,\n        // ummapped ratio\n        raw: ratio,\n    };\n};\n/**\n * Calculate eyelid distance ratios based on landmarks on the face\n */\nexport const eyeLidRatio = (eyeOuterCorner, eyeInnerCorner, eyeOuterUpperLid, eyeMidUpperLid, eyeInnerUpperLid, eyeOuterLowerLid, eyeMidLowerLid, eyeInnerLowerLid) => {\n    eyeOuterCorner = new Vector(eyeOuterCorner);\n    eyeInnerCorner = new Vector(eyeInnerCorner);\n    eyeOuterUpperLid = new Vector(eyeOuterUpperLid);\n    eyeMidUpperLid = new Vector(eyeMidUpperLid);\n    eyeInnerUpperLid = new Vector(eyeInnerUpperLid);\n    eyeOuterLowerLid = new Vector(eyeOuterLowerLid);\n    eyeMidLowerLid = new Vector(eyeMidLowerLid);\n    eyeInnerLowerLid = new Vector(eyeInnerLowerLid);\n    //use 2D Distances instead of 3D for less jitter\n    const eyeWidth = eyeOuterCorner.distance(eyeInnerCorner, 2);\n    const eyeOuterLidDistance = eyeOuterUpperLid.distance(eyeOuterLowerLid, 2);\n    const eyeMidLidDistance = eyeMidUpperLid.distance(eyeMidLowerLid, 2);\n    const eyeInnerLidDistance = eyeInnerUpperLid.distance(eyeInnerLowerLid, 2);\n    const eyeLidAvg = (eyeOuterLidDistance + eyeMidLidDistance + eyeInnerLidDistance) / 3;\n    const ratio = eyeLidAvg / eyeWidth;\n    return ratio;\n};\n/**\n * Calculate pupil position [-1,1]\n * @param {Results} lm : array of results from tfjs or mediapipe\n * @param {Side} side : left or right\n */\nexport const pupilPos = (lm, side = LEFT) => {\n    const eyeOuterCorner = new Vector(lm[points.eye[side][0]]);\n    const eyeInnerCorner = new Vector(lm[points.eye[side][1]]);\n    const eyeWidth = eyeOuterCorner.distance(eyeInnerCorner, 2);\n    const midPoint = eyeOuterCorner.lerp(eyeInnerCorner, 0.5);\n    const pupil = new Vector(lm[points.pupil[side][0]]);\n    const dx = midPoint.x - pupil.x;\n    //eye center y is slightly above midpoint\n    const dy = midPoint.y - eyeWidth * 0.075 - pupil.y;\n    let ratioX = dx / (eyeWidth / 2);\n    let ratioY = dy / (eyeWidth / 4);\n    ratioX *= 4;\n    ratioY *= 4;\n    return { x: ratioX, y: ratioY };\n};\n/**\n * Method to stabilize blink speeds to fix inconsistent eye open/close timing\n * @param {Object} eye : object with left and right eye values\n * @param {Number} headY : head y axis rotation in radians\n * @param {Object} options: Options for blink stabilization\n */\nexport const stabilizeBlink = (eye, headY, { enableWink = true, maxRot = 0.5, } = {}) => {\n    eye.r = clamp(eye.r, 0, 1);\n    eye.l = clamp(eye.l, 0, 1);\n    //difference between each eye\n    const blinkDiff = Math.abs(eye.l - eye.r);\n    //theshold to which difference is considered a wink\n    const blinkThresh = enableWink ? 0.8 : 1.2;\n    //detect when both eyes are closing\n    const isClosing = eye.l < 0.3 && eye.r < 0.3;\n    //detect when both eyes are opening\n    const isOpen = eye.l > 0.6 && eye.r > 0.6;\n    // sets obstructed eye to the opposite eye value\n    if (headY > maxRot) {\n        return { l: eye.r, r: eye.r };\n    }\n    if (headY < -maxRot) {\n        return { l: eye.l, r: eye.l };\n    }\n    // returns either a wink or averaged blink values\n    return {\n        l: blinkDiff >= blinkThresh && !isClosing && !isOpen\n            ? eye.l\n            : eye.r > eye.l\n                ? Vector.lerp(eye.r, eye.l, 0.95)\n                : Vector.lerp(eye.r, eye.l, 0.05),\n        r: blinkDiff >= blinkThresh && !isClosing && !isOpen\n            ? eye.r\n            : eye.r > eye.l\n                ? Vector.lerp(eye.r, eye.l, 0.95)\n                : Vector.lerp(eye.r, eye.l, 0.05),\n    };\n};\n/**\n * Calculate Eyes\n * @param {Array} lm : array of results from tfjs or mediapipe\n */\nexport const calcEyes = (lm, { high = 0.85, low = 0.55, } = {}) => {\n    //return early if no iris tracking\n    if (lm.length !== 478) {\n        return {\n            l: 1,\n            r: 1,\n        };\n    }\n    //open [0,1]\n    const leftEyeLid = getEyeOpen(lm, LEFT, { high: high, low: low });\n    const rightEyeLid = getEyeOpen(lm, RIGHT, { high: high, low: low });\n    return {\n        l: leftEyeLid.norm || 0,\n        r: rightEyeLid.norm || 0,\n    };\n};\n/**\n * Calculate pupil location normalized to eye bounds\n * @param {Array} lm : array of results from tfjs or mediapipe\n */\nexport const calcPupils = (lm) => {\n    //pupil x:[-1,1],y:[-1,1]\n    if (lm.length !== 478) {\n        return { x: 0, y: 0 };\n    }\n    else {\n        //track pupils using left eye\n        const pupilL = pupilPos(lm, LEFT);\n        const pupilR = pupilPos(lm, RIGHT);\n        return {\n            x: (pupilL.x + pupilR.x) * 0.5 || 0,\n            y: (pupilL.y + pupilR.y) * 0.5 || 0,\n        };\n    }\n};\n/**\n * Calculate brow raise\n * @param {Results} lm : array of results from tfjs or mediapipe\n * @param {Side} side : designate left or right\n */\nexport const getBrowRaise = (lm, side = LEFT) => {\n    const browPoints = points.brow[side];\n    const browDistance = eyeLidRatio(lm[browPoints[0]], lm[browPoints[1]], lm[browPoints[2]], lm[browPoints[3]], lm[browPoints[4]], lm[browPoints[5]], lm[browPoints[6]], lm[browPoints[7]]);\n    const maxBrowRatio = 1.15;\n    const browHigh = 0.125;\n    const browLow = 0.07;\n    const browRatio = browDistance / maxBrowRatio - 1;\n    const browRaiseRatio = (clamp(browRatio, browLow, browHigh) - browLow) / (browHigh - browLow);\n    return browRaiseRatio;\n};\n/**\n * Take the average of left and right eyebrow raise values\n * @param {Array} lm : array of results from tfjs or mediapipe\n */\nexport const calcBrow = (lm) => {\n    if (lm.length !== 478) {\n        return 0;\n    }\n    else {\n        const leftBrow = getBrowRaise(lm, LEFT);\n        const rightBrow = getBrowRaise(lm, RIGHT);\n        return (leftBrow + rightBrow) / 2 || 0;\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}