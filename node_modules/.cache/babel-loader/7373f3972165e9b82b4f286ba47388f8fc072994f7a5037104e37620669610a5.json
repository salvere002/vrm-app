{"ast":null,"code":"import Vector from \"../utils/vector\";\nimport { clamp } from \"../utils/helpers\";\nimport { RIGHT, LEFT } from \"./../constants\";\nimport { PI } from \"./../constants\";\n/**\n * Calculates arm rotation as euler angles\n * @param {Array} lm : array of 3D pose vectors from tfjs or mediapipe\n */\nexport const calcArms = lm => {\n  //Pure Rotation Calculations\n  const UpperArm = {\n    r: Vector.findRotation(lm[11], lm[13]),\n    l: Vector.findRotation(lm[12], lm[14])\n  };\n  UpperArm.r.y = Vector.angleBetween3DCoords(lm[12], lm[11], lm[13]);\n  UpperArm.l.y = Vector.angleBetween3DCoords(lm[11], lm[12], lm[14]);\n  const LowerArm = {\n    r: Vector.findRotation(lm[13], lm[15]),\n    l: Vector.findRotation(lm[14], lm[16])\n  };\n  LowerArm.r.y = Vector.angleBetween3DCoords(lm[11], lm[13], lm[15]);\n  LowerArm.l.y = Vector.angleBetween3DCoords(lm[12], lm[14], lm[16]);\n  LowerArm.r.z = clamp(LowerArm.r.z, -2.14, 0);\n  LowerArm.l.z = clamp(LowerArm.l.z, -2.14, 0);\n  const Hand = {\n    r: Vector.findRotation(Vector.fromArray(lm[15]), Vector.lerp(Vector.fromArray(lm[17]), Vector.fromArray(lm[19]), 0.5)),\n    l: Vector.findRotation(Vector.fromArray(lm[16]), Vector.lerp(Vector.fromArray(lm[18]), Vector.fromArray(lm[20]), 0.5))\n  };\n  //Modify Rotations slightly for more natural movement\n  const rightArmRig = rigArm(UpperArm.r, LowerArm.r, Hand.r, RIGHT);\n  const leftArmRig = rigArm(UpperArm.l, LowerArm.l, Hand.l, LEFT);\n  return {\n    //Scaled\n    UpperArm: {\n      r: rightArmRig.UpperArm,\n      l: leftArmRig.UpperArm\n    },\n    LowerArm: {\n      r: rightArmRig.LowerArm,\n      l: leftArmRig.LowerArm\n    },\n    Hand: {\n      r: rightArmRig.Hand,\n      l: leftArmRig.Hand\n    },\n    //Unscaled\n    Unscaled: {\n      UpperArm: UpperArm,\n      LowerArm: LowerArm,\n      Hand: Hand\n    }\n  };\n};\n/**\n * Converts normalized rotation values into radians clamped by human limits\n * @param {Object} UpperArm : normalized rotation values\n * @param {Object} LowerArm : normalized rotation values\n * @param {Object} Hand : normalized rotation values\n * @param {Side} side : left or right\n */\nexport const rigArm = function (UpperArm, LowerArm, Hand) {\n  let side = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : RIGHT;\n  // Invert modifier based on left vs right side\n  const invert = side === RIGHT ? 1 : -1;\n  UpperArm.z *= -2.3 * invert;\n  //Modify UpperArm rotationY  by LowerArm X and Z rotations\n  UpperArm.y *= PI * invert;\n  UpperArm.y -= Math.max(LowerArm.x);\n  UpperArm.y -= -invert * Math.max(LowerArm.z, 0);\n  UpperArm.x -= 0.3 * invert;\n  LowerArm.z *= -2.14 * invert;\n  LowerArm.y *= 2.14 * invert;\n  LowerArm.x *= 2.14 * invert;\n  //Clamp values to human limits\n  UpperArm.x = clamp(UpperArm.x, -0.5, PI);\n  LowerArm.x = clamp(LowerArm.x, -0.3, 0.3);\n  Hand.y = clamp(Hand.z * 2, -0.6, 0.6); //side to side\n  Hand.z = Hand.z * -2.3 * invert; //up down\n  return {\n    //Returns Values in Radians for direct 3D usage\n    UpperArm: UpperArm,\n    LowerArm: LowerArm,\n    Hand: Hand\n  };\n};","map":{"version":3,"names":["Vector","clamp","RIGHT","LEFT","PI","calcArms","lm","UpperArm","r","findRotation","l","y","angleBetween3DCoords","LowerArm","z","Hand","fromArray","lerp","rightArmRig","rigArm","leftArmRig","Unscaled","side","arguments","length","undefined","invert","Math","max","x"],"sources":["/Users/hzh-mac/Downloads/VRM/vrm-app/node_modules/kalidokit/dist/PoseSolver/calcArms.js"],"sourcesContent":["import Vector from \"../utils/vector\";\nimport { clamp } from \"../utils/helpers\";\nimport { RIGHT, LEFT } from \"./../constants\";\nimport { PI } from \"./../constants\";\n/**\n * Calculates arm rotation as euler angles\n * @param {Array} lm : array of 3D pose vectors from tfjs or mediapipe\n */\nexport const calcArms = (lm) => {\n    //Pure Rotation Calculations\n    const UpperArm = {\n        r: Vector.findRotation(lm[11], lm[13]),\n        l: Vector.findRotation(lm[12], lm[14]),\n    };\n    UpperArm.r.y = Vector.angleBetween3DCoords(lm[12], lm[11], lm[13]);\n    UpperArm.l.y = Vector.angleBetween3DCoords(lm[11], lm[12], lm[14]);\n    const LowerArm = {\n        r: Vector.findRotation(lm[13], lm[15]),\n        l: Vector.findRotation(lm[14], lm[16]),\n    };\n    LowerArm.r.y = Vector.angleBetween3DCoords(lm[11], lm[13], lm[15]);\n    LowerArm.l.y = Vector.angleBetween3DCoords(lm[12], lm[14], lm[16]);\n    LowerArm.r.z = clamp(LowerArm.r.z, -2.14, 0);\n    LowerArm.l.z = clamp(LowerArm.l.z, -2.14, 0);\n    const Hand = {\n        r: Vector.findRotation(Vector.fromArray(lm[15]), Vector.lerp(Vector.fromArray(lm[17]), Vector.fromArray(lm[19]), 0.5)),\n        l: Vector.findRotation(Vector.fromArray(lm[16]), Vector.lerp(Vector.fromArray(lm[18]), Vector.fromArray(lm[20]), 0.5)),\n    };\n    //Modify Rotations slightly for more natural movement\n    const rightArmRig = rigArm(UpperArm.r, LowerArm.r, Hand.r, RIGHT);\n    const leftArmRig = rigArm(UpperArm.l, LowerArm.l, Hand.l, LEFT);\n    return {\n        //Scaled\n        UpperArm: {\n            r: rightArmRig.UpperArm,\n            l: leftArmRig.UpperArm,\n        },\n        LowerArm: {\n            r: rightArmRig.LowerArm,\n            l: leftArmRig.LowerArm,\n        },\n        Hand: {\n            r: rightArmRig.Hand,\n            l: leftArmRig.Hand,\n        },\n        //Unscaled\n        Unscaled: {\n            UpperArm: UpperArm,\n            LowerArm: LowerArm,\n            Hand: Hand,\n        },\n    };\n};\n/**\n * Converts normalized rotation values into radians clamped by human limits\n * @param {Object} UpperArm : normalized rotation values\n * @param {Object} LowerArm : normalized rotation values\n * @param {Object} Hand : normalized rotation values\n * @param {Side} side : left or right\n */\nexport const rigArm = (UpperArm, LowerArm, Hand, side = RIGHT) => {\n    // Invert modifier based on left vs right side\n    const invert = side === RIGHT ? 1 : -1;\n    UpperArm.z *= -2.3 * invert;\n    //Modify UpperArm rotationY  by LowerArm X and Z rotations\n    UpperArm.y *= PI * invert;\n    UpperArm.y -= Math.max(LowerArm.x);\n    UpperArm.y -= -invert * Math.max(LowerArm.z, 0);\n    UpperArm.x -= 0.3 * invert;\n    LowerArm.z *= -2.14 * invert;\n    LowerArm.y *= 2.14 * invert;\n    LowerArm.x *= 2.14 * invert;\n    //Clamp values to human limits\n    UpperArm.x = clamp(UpperArm.x, -0.5, PI);\n    LowerArm.x = clamp(LowerArm.x, -0.3, 0.3);\n    Hand.y = clamp(Hand.z * 2, -0.6, 0.6); //side to side\n    Hand.z = Hand.z * -2.3 * invert; //up down\n    return {\n        //Returns Values in Radians for direct 3D usage\n        UpperArm: UpperArm,\n        LowerArm: LowerArm,\n        Hand: Hand,\n    };\n};\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,iBAAiB;AACpC,SAASC,KAAK,QAAQ,kBAAkB;AACxC,SAASC,KAAK,EAAEC,IAAI,QAAQ,gBAAgB;AAC5C,SAASC,EAAE,QAAQ,gBAAgB;AACnC;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAIC,EAAE,IAAK;EAC5B;EACA,MAAMC,QAAQ,GAAG;IACbC,CAAC,EAAER,MAAM,CAACS,YAAY,CAACH,EAAE,CAAC,EAAE,CAAC,EAAEA,EAAE,CAAC,EAAE,CAAC,CAAC;IACtCI,CAAC,EAAEV,MAAM,CAACS,YAAY,CAACH,EAAE,CAAC,EAAE,CAAC,EAAEA,EAAE,CAAC,EAAE,CAAC;EACzC,CAAC;EACDC,QAAQ,CAACC,CAAC,CAACG,CAAC,GAAGX,MAAM,CAACY,oBAAoB,CAACN,EAAE,CAAC,EAAE,CAAC,EAAEA,EAAE,CAAC,EAAE,CAAC,EAAEA,EAAE,CAAC,EAAE,CAAC,CAAC;EAClEC,QAAQ,CAACG,CAAC,CAACC,CAAC,GAAGX,MAAM,CAACY,oBAAoB,CAACN,EAAE,CAAC,EAAE,CAAC,EAAEA,EAAE,CAAC,EAAE,CAAC,EAAEA,EAAE,CAAC,EAAE,CAAC,CAAC;EAClE,MAAMO,QAAQ,GAAG;IACbL,CAAC,EAAER,MAAM,CAACS,YAAY,CAACH,EAAE,CAAC,EAAE,CAAC,EAAEA,EAAE,CAAC,EAAE,CAAC,CAAC;IACtCI,CAAC,EAAEV,MAAM,CAACS,YAAY,CAACH,EAAE,CAAC,EAAE,CAAC,EAAEA,EAAE,CAAC,EAAE,CAAC;EACzC,CAAC;EACDO,QAAQ,CAACL,CAAC,CAACG,CAAC,GAAGX,MAAM,CAACY,oBAAoB,CAACN,EAAE,CAAC,EAAE,CAAC,EAAEA,EAAE,CAAC,EAAE,CAAC,EAAEA,EAAE,CAAC,EAAE,CAAC,CAAC;EAClEO,QAAQ,CAACH,CAAC,CAACC,CAAC,GAAGX,MAAM,CAACY,oBAAoB,CAACN,EAAE,CAAC,EAAE,CAAC,EAAEA,EAAE,CAAC,EAAE,CAAC,EAAEA,EAAE,CAAC,EAAE,CAAC,CAAC;EAClEO,QAAQ,CAACL,CAAC,CAACM,CAAC,GAAGb,KAAK,CAACY,QAAQ,CAACL,CAAC,CAACM,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;EAC5CD,QAAQ,CAACH,CAAC,CAACI,CAAC,GAAGb,KAAK,CAACY,QAAQ,CAACH,CAAC,CAACI,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;EAC5C,MAAMC,IAAI,GAAG;IACTP,CAAC,EAAER,MAAM,CAACS,YAAY,CAACT,MAAM,CAACgB,SAAS,CAACV,EAAE,CAAC,EAAE,CAAC,CAAC,EAAEN,MAAM,CAACiB,IAAI,CAACjB,MAAM,CAACgB,SAAS,CAACV,EAAE,CAAC,EAAE,CAAC,CAAC,EAAEN,MAAM,CAACgB,SAAS,CAACV,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IACtHI,CAAC,EAAEV,MAAM,CAACS,YAAY,CAACT,MAAM,CAACgB,SAAS,CAACV,EAAE,CAAC,EAAE,CAAC,CAAC,EAAEN,MAAM,CAACiB,IAAI,CAACjB,MAAM,CAACgB,SAAS,CAACV,EAAE,CAAC,EAAE,CAAC,CAAC,EAAEN,MAAM,CAACgB,SAAS,CAACV,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;EACzH,CAAC;EACD;EACA,MAAMY,WAAW,GAAGC,MAAM,CAACZ,QAAQ,CAACC,CAAC,EAAEK,QAAQ,CAACL,CAAC,EAAEO,IAAI,CAACP,CAAC,EAAEN,KAAK,CAAC;EACjE,MAAMkB,UAAU,GAAGD,MAAM,CAACZ,QAAQ,CAACG,CAAC,EAAEG,QAAQ,CAACH,CAAC,EAAEK,IAAI,CAACL,CAAC,EAAEP,IAAI,CAAC;EAC/D,OAAO;IACH;IACAI,QAAQ,EAAE;MACNC,CAAC,EAAEU,WAAW,CAACX,QAAQ;MACvBG,CAAC,EAAEU,UAAU,CAACb;IAClB,CAAC;IACDM,QAAQ,EAAE;MACNL,CAAC,EAAEU,WAAW,CAACL,QAAQ;MACvBH,CAAC,EAAEU,UAAU,CAACP;IAClB,CAAC;IACDE,IAAI,EAAE;MACFP,CAAC,EAAEU,WAAW,CAACH,IAAI;MACnBL,CAAC,EAAEU,UAAU,CAACL;IAClB,CAAC;IACD;IACAM,QAAQ,EAAE;MACNd,QAAQ,EAAEA,QAAQ;MAClBM,QAAQ,EAAEA,QAAQ;MAClBE,IAAI,EAAEA;IACV;EACJ,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,MAAM,GAAG,SAAAA,CAACZ,QAAQ,EAAEM,QAAQ,EAAEE,IAAI,EAAmB;EAAA,IAAjBO,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGrB,KAAK;EACzD;EACA,MAAMwB,MAAM,GAAGJ,IAAI,KAAKpB,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;EACtCK,QAAQ,CAACO,CAAC,IAAI,CAAC,GAAG,GAAGY,MAAM;EAC3B;EACAnB,QAAQ,CAACI,CAAC,IAAIP,EAAE,GAAGsB,MAAM;EACzBnB,QAAQ,CAACI,CAAC,IAAIgB,IAAI,CAACC,GAAG,CAACf,QAAQ,CAACgB,CAAC,CAAC;EAClCtB,QAAQ,CAACI,CAAC,IAAI,CAACe,MAAM,GAAGC,IAAI,CAACC,GAAG,CAACf,QAAQ,CAACC,CAAC,EAAE,CAAC,CAAC;EAC/CP,QAAQ,CAACsB,CAAC,IAAI,GAAG,GAAGH,MAAM;EAC1Bb,QAAQ,CAACC,CAAC,IAAI,CAAC,IAAI,GAAGY,MAAM;EAC5Bb,QAAQ,CAACF,CAAC,IAAI,IAAI,GAAGe,MAAM;EAC3Bb,QAAQ,CAACgB,CAAC,IAAI,IAAI,GAAGH,MAAM;EAC3B;EACAnB,QAAQ,CAACsB,CAAC,GAAG5B,KAAK,CAACM,QAAQ,CAACsB,CAAC,EAAE,CAAC,GAAG,EAAEzB,EAAE,CAAC;EACxCS,QAAQ,CAACgB,CAAC,GAAG5B,KAAK,CAACY,QAAQ,CAACgB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;EACzCd,IAAI,CAACJ,CAAC,GAAGV,KAAK,CAACc,IAAI,CAACD,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;EACvCC,IAAI,CAACD,CAAC,GAAGC,IAAI,CAACD,CAAC,GAAG,CAAC,GAAG,GAAGY,MAAM,CAAC,CAAC;EACjC,OAAO;IACH;IACAnB,QAAQ,EAAEA,QAAQ;IAClBM,QAAQ,EAAEA,QAAQ;IAClBE,IAAI,EAAEA;EACV,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}