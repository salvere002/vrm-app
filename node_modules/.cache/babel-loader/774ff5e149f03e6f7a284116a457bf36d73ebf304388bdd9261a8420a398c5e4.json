{"ast":null,"code":"import Vector from \"../utils/vector\";\nimport { clamp, remap } from \"../utils/helpers\";\nimport { PI } from \"./../constants\";\n/**\n * Calculates Hip rotation and world position\n * @param {Array} lm3d : array of 3D pose vectors from tfjs or mediapipe\n * @param {Array} lm2d : array of 2D pose vectors from tfjs or mediapipe\n */\nexport const calcHips = (lm3d, lm2d) => {\n  //Find 2D normalized Hip and Shoulder Joint Positions/Distances\n  const hipLeft2d = Vector.fromArray(lm2d[23]);\n  const hipRight2d = Vector.fromArray(lm2d[24]);\n  const shoulderLeft2d = Vector.fromArray(lm2d[11]);\n  const shoulderRight2d = Vector.fromArray(lm2d[12]);\n  const hipCenter2d = hipLeft2d.lerp(hipRight2d, 1);\n  const shoulderCenter2d = shoulderLeft2d.lerp(shoulderRight2d, 1);\n  const spineLength = hipCenter2d.distance(shoulderCenter2d);\n  const hips = {\n    position: {\n      x: clamp(hipCenter2d.x - 0.4, -1, 1),\n      y: 0,\n      z: clamp(spineLength - 1, -2, 0)\n    }\n  };\n  hips.worldPosition = {\n    x: hips.position.x,\n    y: 0,\n    z: hips.position.z * Math.pow(hips.position.z * -2, 2)\n  };\n  hips.worldPosition.x *= hips.worldPosition.z;\n  hips.rotation = Vector.rollPitchYaw(lm3d[23], lm3d[24]);\n  //fix -PI, PI jumping\n  if (hips.rotation.y > 0.5) {\n    hips.rotation.y -= 2;\n  }\n  hips.rotation.y += 0.5;\n  //Stop jumping between left and right shoulder tilt\n  if (hips.rotation.z > 0) {\n    hips.rotation.z = 1 - hips.rotation.z;\n  }\n  if (hips.rotation.z < 0) {\n    hips.rotation.z = -1 - hips.rotation.z;\n  }\n  const turnAroundAmountHips = remap(Math.abs(hips.rotation.y), 0.2, 0.4);\n  hips.rotation.z *= 1 - turnAroundAmountHips;\n  hips.rotation.x = 0; //temp fix for inaccurate X axis\n  const spine = Vector.rollPitchYaw(lm3d[11], lm3d[12]);\n  //fix -PI, PI jumping\n  if (spine.y > 0.5) {\n    spine.y -= 2;\n  }\n  spine.y += 0.5;\n  //Stop jumping between left and right shoulder tilt\n  if (spine.z > 0) {\n    spine.z = 1 - spine.z;\n  }\n  if (spine.z < 0) {\n    spine.z = -1 - spine.z;\n  }\n  //fix weird large numbers when 2 shoulder points get too close\n  const turnAroundAmount = remap(Math.abs(spine.y), 0.2, 0.4);\n  spine.z *= 1 - turnAroundAmount;\n  spine.x = 0; //temp fix for inaccurate X axis\n  return rigHips(hips, spine);\n};\n/**\n * Converts normalized rotations to radians and estimates world position of hips\n * @param {Object} hips : hip position and rotation values\n * @param {Object} spine : spine position and rotation values\n */\nexport const rigHips = (hips, spine) => {\n  //convert normalized values to radians\n  if (hips.rotation) {\n    hips.rotation.x *= Math.PI;\n    hips.rotation.y *= Math.PI;\n    hips.rotation.z *= Math.PI;\n  }\n  spine.x *= PI;\n  spine.y *= PI;\n  spine.z *= PI;\n  return {\n    Hips: hips,\n    Spine: spine\n  };\n};","map":{"version":3,"names":["Vector","clamp","remap","PI","calcHips","lm3d","lm2d","hipLeft2d","fromArray","hipRight2d","shoulderLeft2d","shoulderRight2d","hipCenter2d","lerp","shoulderCenter2d","spineLength","distance","hips","position","x","y","z","worldPosition","Math","pow","rotation","rollPitchYaw","turnAroundAmountHips","abs","spine","turnAroundAmount","rigHips","Hips","Spine"],"sources":["/Users/hzh-mac/Downloads/VRM/vrm-app/node_modules/kalidokit/dist/PoseSolver/calcHips.js"],"sourcesContent":["import Vector from \"../utils/vector\";\nimport { clamp, remap } from \"../utils/helpers\";\nimport { PI } from \"./../constants\";\n/**\n * Calculates Hip rotation and world position\n * @param {Array} lm3d : array of 3D pose vectors from tfjs or mediapipe\n * @param {Array} lm2d : array of 2D pose vectors from tfjs or mediapipe\n */\nexport const calcHips = (lm3d, lm2d) => {\n    //Find 2D normalized Hip and Shoulder Joint Positions/Distances\n    const hipLeft2d = Vector.fromArray(lm2d[23]);\n    const hipRight2d = Vector.fromArray(lm2d[24]);\n    const shoulderLeft2d = Vector.fromArray(lm2d[11]);\n    const shoulderRight2d = Vector.fromArray(lm2d[12]);\n    const hipCenter2d = hipLeft2d.lerp(hipRight2d, 1);\n    const shoulderCenter2d = shoulderLeft2d.lerp(shoulderRight2d, 1);\n    const spineLength = hipCenter2d.distance(shoulderCenter2d);\n    const hips = {\n        position: {\n            x: clamp(hipCenter2d.x - 0.4, -1, 1),\n            y: 0,\n            z: clamp(spineLength - 1, -2, 0),\n        },\n    };\n    hips.worldPosition = {\n        x: hips.position.x,\n        y: 0,\n        z: hips.position.z * Math.pow(hips.position.z * -2, 2),\n    };\n    hips.worldPosition.x *= hips.worldPosition.z;\n    hips.rotation = Vector.rollPitchYaw(lm3d[23], lm3d[24]);\n    //fix -PI, PI jumping\n    if (hips.rotation.y > 0.5) {\n        hips.rotation.y -= 2;\n    }\n    hips.rotation.y += 0.5;\n    //Stop jumping between left and right shoulder tilt\n    if (hips.rotation.z > 0) {\n        hips.rotation.z = 1 - hips.rotation.z;\n    }\n    if (hips.rotation.z < 0) {\n        hips.rotation.z = -1 - hips.rotation.z;\n    }\n    const turnAroundAmountHips = remap(Math.abs(hips.rotation.y), 0.2, 0.4);\n    hips.rotation.z *= 1 - turnAroundAmountHips;\n    hips.rotation.x = 0; //temp fix for inaccurate X axis\n    const spine = Vector.rollPitchYaw(lm3d[11], lm3d[12]);\n    //fix -PI, PI jumping\n    if (spine.y > 0.5) {\n        spine.y -= 2;\n    }\n    spine.y += 0.5;\n    //Stop jumping between left and right shoulder tilt\n    if (spine.z > 0) {\n        spine.z = 1 - spine.z;\n    }\n    if (spine.z < 0) {\n        spine.z = -1 - spine.z;\n    }\n    //fix weird large numbers when 2 shoulder points get too close\n    const turnAroundAmount = remap(Math.abs(spine.y), 0.2, 0.4);\n    spine.z *= 1 - turnAroundAmount;\n    spine.x = 0; //temp fix for inaccurate X axis\n    return rigHips(hips, spine);\n};\n/**\n * Converts normalized rotations to radians and estimates world position of hips\n * @param {Object} hips : hip position and rotation values\n * @param {Object} spine : spine position and rotation values\n */\nexport const rigHips = (hips, spine) => {\n    //convert normalized values to radians\n    if (hips.rotation) {\n        hips.rotation.x *= Math.PI;\n        hips.rotation.y *= Math.PI;\n        hips.rotation.z *= Math.PI;\n    }\n    spine.x *= PI;\n    spine.y *= PI;\n    spine.z *= PI;\n    return {\n        Hips: hips,\n        Spine: spine,\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}