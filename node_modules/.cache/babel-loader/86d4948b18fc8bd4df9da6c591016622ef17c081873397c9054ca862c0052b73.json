{"ast":null,"code":"import { RestingDefault } from \"../utils/helpers\";\nimport { calcArms } from \"./calcArms\";\nimport { calcHips } from \"./calcHips\";\nimport { calcLegs } from \"./calcLegs\";\n/** Class representing pose solver. */\nexport class PoseSolver {\n  /**\n   * Combines arm, hips, and leg calcs into one method\n   * @param {Array} lm3d : array of 3D pose vectors from tfjs or mediapipe\n   * @param {Array} lm2d : array of 2D pose vectors from tfjs or mediapipe\n   * @param {String} runtime: set as either \"tfjs\" or \"mediapipe\"\n   * @param {IPoseSolveOptions} options: options object\n   */\n  static solve(lm3d, lm2d) {\n    let {\n      runtime = \"mediapipe\",\n      video = null,\n      imageSize = null,\n      enableLegs = true\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var _a, _b, _c, _d;\n    if (!lm3d && !lm2d) {\n      console.error(\"Need both World Pose and Pose Landmarks\");\n      return;\n    }\n    // format and normalize values given by tfjs output\n    if (video) {\n      const videoEl = typeof video === \"string\" ? document.querySelector(video) : video;\n      imageSize = {\n        width: videoEl.videoWidth,\n        height: videoEl.videoHeight\n      };\n    }\n    if (runtime === \"tfjs\" && imageSize) {\n      for (const e of lm3d) {\n        e.visibility = e.score;\n      }\n      for (const e of lm2d) {\n        e.x /= imageSize.width;\n        e.y /= imageSize.height;\n        e.z = 0;\n        e.visibility = e.score;\n      }\n    }\n    const Arms = calcArms(lm3d);\n    const Hips = calcHips(lm3d, lm2d);\n    const Legs = enableLegs ? calcLegs(lm3d) : null;\n    //DETECT OFFSCREEN AND RESET VALUES TO DEFAULTS\n    const rightHandOffscreen = lm3d[15].y > 0.1 || ((_a = lm3d[15].visibility) !== null && _a !== void 0 ? _a : 0) < 0.23 || 0.995 < lm2d[15].y;\n    const leftHandOffscreen = lm3d[16].y > 0.1 || ((_b = lm3d[16].visibility) !== null && _b !== void 0 ? _b : 0) < 0.23 || 0.995 < lm2d[16].y;\n    const leftFootOffscreen = lm3d[23].y > 0.1 || ((_c = lm3d[23].visibility) !== null && _c !== void 0 ? _c : 0) < 0.63 || Hips.Hips.position.z > -0.4;\n    const rightFootOffscreen = lm3d[24].y > 0.1 || ((_d = lm3d[24].visibility) !== null && _d !== void 0 ? _d : 0) < 0.63 || Hips.Hips.position.z > -0.4;\n    Arms.UpperArm.l = Arms.UpperArm.l.multiply(leftHandOffscreen ? 0 : 1);\n    Arms.UpperArm.l.z = leftHandOffscreen ? RestingDefault.Pose.LeftUpperArm.z : Arms.UpperArm.l.z;\n    Arms.UpperArm.r = Arms.UpperArm.r.multiply(rightHandOffscreen ? 0 : 1);\n    Arms.UpperArm.r.z = rightHandOffscreen ? RestingDefault.Pose.RightUpperArm.z : Arms.UpperArm.r.z;\n    Arms.LowerArm.l = Arms.LowerArm.l.multiply(leftHandOffscreen ? 0 : 1);\n    Arms.LowerArm.r = Arms.LowerArm.r.multiply(rightHandOffscreen ? 0 : 1);\n    Arms.Hand.l = Arms.Hand.l.multiply(leftHandOffscreen ? 0 : 1);\n    Arms.Hand.r = Arms.Hand.r.multiply(rightHandOffscreen ? 0 : 1);\n    //skip calculations if disable legs\n    if (Legs) {\n      Legs.UpperLeg.l = Legs.UpperLeg.l.multiply(rightFootOffscreen ? 0 : 1);\n      Legs.UpperLeg.r = Legs.UpperLeg.r.multiply(leftFootOffscreen ? 0 : 1);\n      Legs.LowerLeg.l = Legs.LowerLeg.l.multiply(rightFootOffscreen ? 0 : 1);\n      Legs.LowerLeg.r = Legs.LowerLeg.r.multiply(leftFootOffscreen ? 0 : 1);\n    }\n    return {\n      RightUpperArm: Arms.UpperArm.r,\n      RightLowerArm: Arms.LowerArm.r,\n      LeftUpperArm: Arms.UpperArm.l,\n      LeftLowerArm: Arms.LowerArm.l,\n      RightHand: Arms.Hand.r,\n      LeftHand: Arms.Hand.l,\n      RightUpperLeg: Legs ? Legs.UpperLeg.r : RestingDefault.Pose.RightUpperLeg,\n      RightLowerLeg: Legs ? Legs.LowerLeg.r : RestingDefault.Pose.RightLowerLeg,\n      LeftUpperLeg: Legs ? Legs.UpperLeg.l : RestingDefault.Pose.LeftUpperLeg,\n      LeftLowerLeg: Legs ? Legs.LowerLeg.l : RestingDefault.Pose.LeftLowerLeg,\n      Hips: Hips.Hips,\n      Spine: Hips.Spine\n    };\n  }\n}\n/** expose arm rotation calculator as a static method */\nPoseSolver.calcArms = calcArms;\n/** expose hips position and rotation calculator as a static method */\nPoseSolver.calcHips = calcHips;\n/** expose leg rotation calculator as a static method */\nPoseSolver.calcLegs = calcLegs;","map":{"version":3,"names":["RestingDefault","calcArms","calcHips","calcLegs","PoseSolver","solve","lm3d","lm2d","runtime","video","imageSize","enableLegs","arguments","length","undefined","_a","_b","_c","_d","console","error","videoEl","document","querySelector","width","videoWidth","height","videoHeight","e","visibility","score","x","y","z","Arms","Hips","Legs","rightHandOffscreen","leftHandOffscreen","leftFootOffscreen","position","rightFootOffscreen","UpperArm","l","multiply","Pose","LeftUpperArm","r","RightUpperArm","LowerArm","Hand","UpperLeg","LowerLeg","RightLowerArm","LeftLowerArm","RightHand","LeftHand","RightUpperLeg","RightLowerLeg","LeftUpperLeg","LeftLowerLeg","Spine"],"sources":["/Users/hzh-mac/Downloads/VRM/vrm-app/node_modules/kalidokit/dist/PoseSolver/index.js"],"sourcesContent":["import { RestingDefault } from \"../utils/helpers\";\nimport { calcArms } from \"./calcArms\";\nimport { calcHips } from \"./calcHips\";\nimport { calcLegs } from \"./calcLegs\";\n/** Class representing pose solver. */\nexport class PoseSolver {\n    /**\n     * Combines arm, hips, and leg calcs into one method\n     * @param {Array} lm3d : array of 3D pose vectors from tfjs or mediapipe\n     * @param {Array} lm2d : array of 2D pose vectors from tfjs or mediapipe\n     * @param {String} runtime: set as either \"tfjs\" or \"mediapipe\"\n     * @param {IPoseSolveOptions} options: options object\n     */\n    static solve(lm3d, lm2d, { runtime = \"mediapipe\", video = null, imageSize = null, enableLegs = true } = {}) {\n        var _a, _b, _c, _d;\n        if (!lm3d && !lm2d) {\n            console.error(\"Need both World Pose and Pose Landmarks\");\n            return;\n        }\n        // format and normalize values given by tfjs output\n        if (video) {\n            const videoEl = (typeof video === \"string\" ? document.querySelector(video) : video);\n            imageSize = {\n                width: videoEl.videoWidth,\n                height: videoEl.videoHeight,\n            };\n        }\n        if (runtime === \"tfjs\" && imageSize) {\n            for (const e of lm3d) {\n                e.visibility = e.score;\n            }\n            for (const e of lm2d) {\n                e.x /= imageSize.width;\n                e.y /= imageSize.height;\n                e.z = 0;\n                e.visibility = e.score;\n            }\n        }\n        const Arms = calcArms(lm3d);\n        const Hips = calcHips(lm3d, lm2d);\n        const Legs = enableLegs ? calcLegs(lm3d) : null;\n        //DETECT OFFSCREEN AND RESET VALUES TO DEFAULTS\n        const rightHandOffscreen = lm3d[15].y > 0.1 || ((_a = lm3d[15].visibility) !== null && _a !== void 0 ? _a : 0) < 0.23 || 0.995 < lm2d[15].y;\n        const leftHandOffscreen = lm3d[16].y > 0.1 || ((_b = lm3d[16].visibility) !== null && _b !== void 0 ? _b : 0) < 0.23 || 0.995 < lm2d[16].y;\n        const leftFootOffscreen = lm3d[23].y > 0.1 || ((_c = lm3d[23].visibility) !== null && _c !== void 0 ? _c : 0) < 0.63 || Hips.Hips.position.z > -0.4;\n        const rightFootOffscreen = lm3d[24].y > 0.1 || ((_d = lm3d[24].visibility) !== null && _d !== void 0 ? _d : 0) < 0.63 || Hips.Hips.position.z > -0.4;\n        Arms.UpperArm.l = Arms.UpperArm.l.multiply(leftHandOffscreen ? 0 : 1);\n        Arms.UpperArm.l.z = leftHandOffscreen ? RestingDefault.Pose.LeftUpperArm.z : Arms.UpperArm.l.z;\n        Arms.UpperArm.r = Arms.UpperArm.r.multiply(rightHandOffscreen ? 0 : 1);\n        Arms.UpperArm.r.z = rightHandOffscreen ? RestingDefault.Pose.RightUpperArm.z : Arms.UpperArm.r.z;\n        Arms.LowerArm.l = Arms.LowerArm.l.multiply(leftHandOffscreen ? 0 : 1);\n        Arms.LowerArm.r = Arms.LowerArm.r.multiply(rightHandOffscreen ? 0 : 1);\n        Arms.Hand.l = Arms.Hand.l.multiply(leftHandOffscreen ? 0 : 1);\n        Arms.Hand.r = Arms.Hand.r.multiply(rightHandOffscreen ? 0 : 1);\n        //skip calculations if disable legs\n        if (Legs) {\n            Legs.UpperLeg.l = Legs.UpperLeg.l.multiply(rightFootOffscreen ? 0 : 1);\n            Legs.UpperLeg.r = Legs.UpperLeg.r.multiply(leftFootOffscreen ? 0 : 1);\n            Legs.LowerLeg.l = Legs.LowerLeg.l.multiply(rightFootOffscreen ? 0 : 1);\n            Legs.LowerLeg.r = Legs.LowerLeg.r.multiply(leftFootOffscreen ? 0 : 1);\n        }\n        return {\n            RightUpperArm: Arms.UpperArm.r,\n            RightLowerArm: Arms.LowerArm.r,\n            LeftUpperArm: Arms.UpperArm.l,\n            LeftLowerArm: Arms.LowerArm.l,\n            RightHand: Arms.Hand.r,\n            LeftHand: Arms.Hand.l,\n            RightUpperLeg: Legs ? Legs.UpperLeg.r : RestingDefault.Pose.RightUpperLeg,\n            RightLowerLeg: Legs ? Legs.LowerLeg.r : RestingDefault.Pose.RightLowerLeg,\n            LeftUpperLeg: Legs ? Legs.UpperLeg.l : RestingDefault.Pose.LeftUpperLeg,\n            LeftLowerLeg: Legs ? Legs.LowerLeg.l : RestingDefault.Pose.LeftLowerLeg,\n            Hips: Hips.Hips,\n            Spine: Hips.Spine,\n        };\n    }\n}\n/** expose arm rotation calculator as a static method */\nPoseSolver.calcArms = calcArms;\n/** expose hips position and rotation calculator as a static method */\nPoseSolver.calcHips = calcHips;\n/** expose leg rotation calculator as a static method */\nPoseSolver.calcLegs = calcLegs;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}