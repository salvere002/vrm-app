{"ast":null,"code":"import Vector from \"../utils/vector\";\nimport { remap, clamp } from \"../utils/helpers\";\n/**\n * Calculate Mouth Shape\n * @param {Array} lm : array of results from tfjs or mediapipe\n */\nexport const calcMouth = lm => {\n  // eye keypoints\n  const eyeInnerCornerL = new Vector(lm[133]);\n  const eyeInnerCornerR = new Vector(lm[362]);\n  const eyeOuterCornerL = new Vector(lm[130]);\n  const eyeOuterCornerR = new Vector(lm[263]);\n  // eye keypoint distances\n  const eyeInnerDistance = eyeInnerCornerL.distance(eyeInnerCornerR);\n  const eyeOuterDistance = eyeOuterCornerL.distance(eyeOuterCornerR);\n  // mouth keypoints\n  const upperInnerLip = new Vector(lm[13]);\n  const lowerInnerLip = new Vector(lm[14]);\n  const mouthCornerLeft = new Vector(lm[61]);\n  const mouthCornerRight = new Vector(lm[291]);\n  // mouth keypoint distances\n  const mouthOpen = upperInnerLip.distance(lowerInnerLip);\n  const mouthWidth = mouthCornerLeft.distance(mouthCornerRight);\n  // mouth open and mouth shape ratios\n  // let ratioXY = mouthWidth / mouthOpen;\n  let ratioY = mouthOpen / eyeInnerDistance;\n  let ratioX = mouthWidth / eyeOuterDistance;\n  // normalize and scale mouth open\n  ratioY = remap(ratioY, 0.15, 0.7);\n  // normalize and scale mouth shape\n  ratioX = remap(ratioX, 0.45, 0.9);\n  ratioX = (ratioX - 0.3) * 2;\n  // const mouthX = remap(ratioX - 0.4, 0, 0.5);\n  const mouthX = ratioX;\n  const mouthY = remap(mouthOpen / eyeInnerDistance, 0.17, 0.5);\n  //Depricated: Change sensitivity due to facemesh and holistic have different point outputs.\n  // const fixFacemesh = runtime === \"tfjs\" ? 1.3 : 0;\n  // let ratioI = remap(mouthXY, 1.3 + fixFacemesh * 0.8, 2.6 + fixFacemesh) * remap(mouthY, 0, 1);\n  const ratioI = clamp(remap(mouthX, 0, 1) * 2 * remap(mouthY, 0.2, 0.7), 0, 1);\n  const ratioA = mouthY * 0.4 + mouthY * (1 - ratioI) * 0.6;\n  const ratioU = mouthY * remap(1 - ratioI, 0, 0.3) * 0.1;\n  const ratioE = remap(ratioU, 0.2, 1) * (1 - ratioI) * 0.3;\n  const ratioO = (1 - ratioI) * remap(mouthY, 0.3, 1) * 0.4;\n  return {\n    x: ratioX || 0,\n    y: ratioY || 0,\n    shape: {\n      A: ratioA || 0,\n      E: ratioE || 0,\n      I: ratioI || 0,\n      O: ratioO || 0,\n      U: ratioU || 0\n    }\n  };\n};","map":{"version":3,"names":["Vector","remap","clamp","calcMouth","lm","eyeInnerCornerL","eyeInnerCornerR","eyeOuterCornerL","eyeOuterCornerR","eyeInnerDistance","distance","eyeOuterDistance","upperInnerLip","lowerInnerLip","mouthCornerLeft","mouthCornerRight","mouthOpen","mouthWidth","ratioY","ratioX","mouthX","mouthY","ratioI","ratioA","ratioU","ratioE","ratioO","x","y","shape","A","E","I","O","U"],"sources":["/Users/hzh-mac/Downloads/VRM/vrm-app/node_modules/kalidokit/dist/FaceSolver/calcMouth.js"],"sourcesContent":["import Vector from \"../utils/vector\";\nimport { remap, clamp } from \"../utils/helpers\";\n/**\n * Calculate Mouth Shape\n * @param {Array} lm : array of results from tfjs or mediapipe\n */\nexport const calcMouth = (lm) => {\n    // eye keypoints\n    const eyeInnerCornerL = new Vector(lm[133]);\n    const eyeInnerCornerR = new Vector(lm[362]);\n    const eyeOuterCornerL = new Vector(lm[130]);\n    const eyeOuterCornerR = new Vector(lm[263]);\n    // eye keypoint distances\n    const eyeInnerDistance = eyeInnerCornerL.distance(eyeInnerCornerR);\n    const eyeOuterDistance = eyeOuterCornerL.distance(eyeOuterCornerR);\n    // mouth keypoints\n    const upperInnerLip = new Vector(lm[13]);\n    const lowerInnerLip = new Vector(lm[14]);\n    const mouthCornerLeft = new Vector(lm[61]);\n    const mouthCornerRight = new Vector(lm[291]);\n    // mouth keypoint distances\n    const mouthOpen = upperInnerLip.distance(lowerInnerLip);\n    const mouthWidth = mouthCornerLeft.distance(mouthCornerRight);\n    // mouth open and mouth shape ratios\n    // let ratioXY = mouthWidth / mouthOpen;\n    let ratioY = mouthOpen / eyeInnerDistance;\n    let ratioX = mouthWidth / eyeOuterDistance;\n    // normalize and scale mouth open\n    ratioY = remap(ratioY, 0.15, 0.7);\n    // normalize and scale mouth shape\n    ratioX = remap(ratioX, 0.45, 0.9);\n    ratioX = (ratioX - 0.3) * 2;\n    // const mouthX = remap(ratioX - 0.4, 0, 0.5);\n    const mouthX = ratioX;\n    const mouthY = remap(mouthOpen / eyeInnerDistance, 0.17, 0.5);\n    //Depricated: Change sensitivity due to facemesh and holistic have different point outputs.\n    // const fixFacemesh = runtime === \"tfjs\" ? 1.3 : 0;\n    // let ratioI = remap(mouthXY, 1.3 + fixFacemesh * 0.8, 2.6 + fixFacemesh) * remap(mouthY, 0, 1);\n    const ratioI = clamp(remap(mouthX, 0, 1) * 2 * remap(mouthY, 0.2, 0.7), 0, 1);\n    const ratioA = mouthY * 0.4 + mouthY * (1 - ratioI) * 0.6;\n    const ratioU = mouthY * remap(1 - ratioI, 0, 0.3) * 0.1;\n    const ratioE = remap(ratioU, 0.2, 1) * (1 - ratioI) * 0.3;\n    const ratioO = (1 - ratioI) * remap(mouthY, 0.3, 1) * 0.4;\n    return {\n        x: ratioX || 0,\n        y: ratioY || 0,\n        shape: {\n            A: ratioA || 0,\n            E: ratioE || 0,\n            I: ratioI || 0,\n            O: ratioO || 0,\n            U: ratioU || 0,\n        },\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}